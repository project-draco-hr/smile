{
  super(new GridLayout(2,3));
  setBackground(Color.WHITE);
  double[] x1={0,1,2,3};
  double[] x2={0,1,2,3};
  double[][] y={{1,2,4,1},{6,3,5,2},{4,2,1,5},{5,4,2,3}};
  BicubicInterpolation bicubic=new BicubicInterpolation(x1,x2,y);
  double[][] yy=new double[26][26];
  for (int i=0; i <= 25; i++) {
    for (int j=0; j <= 25; j++) {
      yy[i][j]=bicubic.interpolate(i * 0.12,j * 0.12);
    }
  }
  PlotCanvas canvas=Heatmap.plot(yy,Palette.jet(256));
  canvas.setTitle("Original");
  add(canvas);
  double[][] ww=new double[26][26];
  ArrayList<double[]> xx=new ArrayList<>();
  ArrayList<Double> zz=new ArrayList<>();
  for (int i=0; i <= 25; i++) {
    for (int j=0; j <= 25; j++) {
      if (Math.random() < 0.2)       ww[i][j]=Double.NaN;
 else       ww[i][j]=yy[i][j];
      if (!Double.isNaN(ww[i][j])) {
        double[] pos=new double[2];
        pos[0]=j * 0.12;
        pos[1]=i * 0.12;
        xx.add(pos);
        zz.add(ww[i][j]);
      }
    }
  }
  double[][] p=new double[xx.size()][];
  double[] q=new double[xx.size()];
  for (int i=0; i < p.length; i++) {
    p[i]=xx.get(i);
    q[i]=zz.get(i);
  }
  canvas=Heatmap.plot(ww,Palette.jet(256));
  canvas.setTitle("Missing Values");
  add(canvas);
  KrigingInterpolation kriging=new KrigingInterpolation(p,q);
  double[][] uu=new double[26][26];
  for (int i=0; i <= 25; i++) {
    for (int j=0; j <= 25; j++) {
      if (Double.isNaN(ww[i][j])) {
        uu[i][j]=kriging.interpolate(j * 0.12,i * 0.12);
      }
 else {
        uu[i][j]=ww[i][j];
      }
    }
  }
  canvas=Heatmap.plot(uu,Palette.jet(256));
  canvas.setTitle("Kriging");
  add(canvas);
  RBFInterpolation rbf=new RBFInterpolation(p,q,new GaussianRadialBasis(0.25));
  double[][] vv=new double[26][26];
  for (int i=0; i <= 25; i++) {
    for (int j=0; j <= 25; j++) {
      if (Double.isNaN(ww[i][j])) {
        vv[i][j]=rbf.interpolate(j * 0.12,i * 0.12);
      }
 else {
        vv[i][j]=ww[i][j];
      }
    }
  }
  canvas=Heatmap.plot(vv,Palette.jet(256));
  canvas.setTitle("RBF");
  add(canvas);
  ShepardInterpolation shepard=new ShepardInterpolation(p,q,3);
  double[][] rr=new double[26][26];
  for (int i=0; i <= 25; i++) {
    for (int j=0; j <= 25; j++) {
      if (Double.isNaN(ww[i][j])) {
        rr[i][j]=shepard.interpolate(j * 0.12,i * 0.12);
      }
 else {
        rr[i][j]=ww[i][j];
      }
    }
  }
  canvas=Heatmap.plot(rr,Palette.jet(256));
  canvas.setTitle("Shepard");
  add(canvas);
}
