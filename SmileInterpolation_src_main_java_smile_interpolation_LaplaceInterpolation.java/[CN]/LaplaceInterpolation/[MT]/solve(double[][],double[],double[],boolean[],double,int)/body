{
  double err=0.0;
  double ak, akden, bk, bkden=1.0, bknum, bnrm;
  int j, n=b.length;
  double[] p=new double[n];
  double[] pp=new double[n];
  double[] r=new double[n];
  double[] rr=new double[n];
  double[] z=new double[n];
  double[] zz=new double[n];
  ax(matrix,x,r,mask);
  for (j=0; j < n; j++) {
    r[j]=b[j] - r[j];
    rr[j]=r[j];
  }
  bnrm=snorm(b);
  asolve(r,z);
  for (int iter=0; iter < maxIter; iter++) {
    asolve(rr,zz);
    for (bknum=0.0, j=0; j < n; j++) {
      bknum+=z[j] * rr[j];
    }
    if (iter == 1) {
      for (j=0; j < n; j++) {
        p[j]=z[j];
        pp[j]=zz[j];
      }
    }
 else {
      bk=bknum / bkden;
      for (j=0; j < n; j++) {
        p[j]=bk * p[j] + z[j];
        pp[j]=bk * pp[j] + zz[j];
      }
    }
    bkden=bknum;
    ax(matrix,p,z,mask);
    for (akden=0.0, j=0; j < n; j++) {
      akden+=z[j] * pp[j];
    }
    ak=bknum / akden;
    atx(matrix,pp,zz,mask);
    for (j=0; j < n; j++) {
      x[j]+=ak * p[j];
      r[j]-=ak * z[j];
      rr[j]-=ak * zz[j];
    }
    asolve(r,z);
    err=snorm(r) / bnrm;
    if (err <= tol) {
      break;
    }
  }
  return err;
}
