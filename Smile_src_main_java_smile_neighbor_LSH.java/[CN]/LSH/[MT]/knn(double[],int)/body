{
  if (k < 1) {
    throw new IllegalArgumentException("Invalid k: " + k);
  }
  Set<Integer> candidates=obtainCandidates(q);
  Neighbor<double[],E> neighbor=new Neighbor<double[],E>(null,null,0,Double.MAX_VALUE);
  @SuppressWarnings("unchecked") Neighbor<double[],E>[] neighbors=(Neighbor<double[],E>[])java.lang.reflect.Array.newInstance(neighbor.getClass(),k);
  HeapSelect<Neighbor<double[],E>> heap=new HeapSelect<Neighbor<double[],E>>(neighbors);
  for (int i=0; i < k; i++) {
    heap.add(neighbor);
  }
  int hit=0;
  for (  int index : candidates) {
    double[] key=keys.get(index);
    if (q == key && identicalExcluded) {
      continue;
    }
    double distance=Math.distance(q,key);
    if (distance < heap.peek().distance) {
      heap.add(new Neighbor<double[],E>(key,data.get(index),index,distance));
      hit++;
    }
  }
  heap.sort();
  if (hit < k) {
    @SuppressWarnings("unchecked") Neighbor<double[],E>[] n2=(Neighbor<double[],E>[])java.lang.reflect.Array.newInstance(neighbor.getClass(),hit);
    int start=k - hit;
    for (int i=0; i < hit; i++) {
      n2[i]=neighbors[i + start];
    }
    neighbors=n2;
  }
  return neighbors;
}
