{
  startButton.setEnabled(false);
  logNSlider.setEnabled(false);
  dimensionSlider.setEnabled(false);
  logN=logNSlider.getValue();
  dimension=dimensionSlider.getValue();
  System.out.println("Generating dataset...");
  int n=(int)Math.pow(10,logN);
  double[][] data=new double[n][];
  for (int i=0; i < n; i++) {
    data[i]=new double[dimension];
    for (int j=0; j < dimension; j++) {
      data[i][j]=Math.random();
    }
  }
  int[] perm=Math.permutate(n);
  System.out.println("Building searching data structure...");
  long time=System.currentTimeMillis();
  LinearSearch<double[]> naive=new LinearSearch<double[]>(data,new EuclideanDistance());
  int naiveBuild=(int)(System.currentTimeMillis() - time);
  time=System.currentTimeMillis();
  KDTree<double[]> kdtree=new KDTree<double[]>(data,data);
  int kdtreeBuild=(int)(System.currentTimeMillis() - time);
  time=System.currentTimeMillis();
  CoverTree<double[]> cover=new CoverTree<double[]>(data,new EuclideanDistance());
  int coverBuild=(int)(System.currentTimeMillis() - time);
  System.out.println("Perform 100 searches...");
  int[] answer=new int[100];
  double radius=0.0;
  time=System.currentTimeMillis();
  for (int i=0; i < 100; i++) {
    Neighbor<double[],double[]> neighbor=naive.nearest(data[perm[i]]);
    answer[i]=neighbor.index;
    radius+=neighbor.distance;
  }
  int naiveSearch=(int)(System.currentTimeMillis() - time);
  radius/=100;
  time=System.currentTimeMillis();
  for (int i=0; i < 100; i++) {
    kdtree.nearest(data[perm[i]]);
  }
  int kdtreeSearch=(int)(System.currentTimeMillis() - time);
  time=System.currentTimeMillis();
  for (int i=0; i < 100; i++) {
    cover.nearest(data[perm[i]]);
  }
  int coverSearch=(int)(System.currentTimeMillis() - time);
  time=System.currentTimeMillis();
  LSH<double[]> lsh=new LSH<double[]>(dimension,5,(int)Math.ceil(Math.log2(dimension)),4 * radius,1017881);
  for (int i=0; i < n; i++) {
    lsh.put(data[i],data[i]);
  }
  int lshBuild=(int)(System.currentTimeMillis() - time);
  double lshRecall=0.0;
  time=System.currentTimeMillis();
  for (int i=0; i < 100; i++) {
    if (lsh.nearest(data[perm[i]]).index == answer[i]) {
      lshRecall++;
    }
  }
  int lshSearch=(int)(System.currentTimeMillis() - time);
  lshRecall/=100;
  System.out.format("The recall of LSH is %.1f%%\n",lshRecall * 100);
  time=System.currentTimeMillis();
  MPLSH<double[]> mplsh=new MPLSH<double[]>(dimension,5,(int)Math.ceil(Math.log2(n)),4 * radius,1017881);
  for (int i=0; i < n; i++) {
    mplsh.put(data[i],data[i]);
  }
  double[][] train=new double[1000][];
  for (int i=0; i < train.length; i++) {
    train[i]=data[perm[i]];
  }
  mplsh.learn(kdtree,train,1.5 * radius);
  int mplshBuild=(int)(System.currentTimeMillis() - time);
  double mplshRecall=0.0;
  time=System.currentTimeMillis();
  for (int i=0; i < 100; i++) {
    if (mplsh.nearest(data[perm[i]],0.95,10).index == answer[i]) {
      mplshRecall++;
    }
  }
  int mplshSearch=(int)(System.currentTimeMillis() - time);
  mplshRecall/=100;
  System.out.format("The recall of MPLSH is %.1f%%\n",mplshRecall * 100);
  canvas.removeAll();
  double[] buildTime={naiveBuild,kdtreeBuild,coverBuild,lshBuild,mplshBuild};
  PlotCanvas build=BarPlot.plot(buildTime,label);
  build.setTitle("Build Time");
  canvas.add(build);
  double[] searchTime={naiveSearch,kdtreeSearch,coverSearch,lshSearch,mplshSearch};
  PlotCanvas search=BarPlot.plot(searchTime,label);
  search.setTitle("Search Time");
  canvas.add(search);
  validate();
  startButton.setEnabled(true);
  logNSlider.setEnabled(true);
  dimensionSlider.setEnabled(true);
}
