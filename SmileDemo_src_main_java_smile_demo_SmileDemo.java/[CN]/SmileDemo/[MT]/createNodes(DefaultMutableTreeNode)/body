{
  DefaultMutableTreeNode category=null;
  DefaultMutableTreeNode category2=null;
  DefaultMutableTreeNode algorithm=null;
  category=new DefaultMutableTreeNode("Feature Extraction");
  top.add(category);
  algorithm=new DefaultMutableTreeNode(new PCADemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new KPCADemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new PPCADemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new GHADemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new smile.demo.projection.LDADemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new RandomProjectionDemo());
  category.add(algorithm);
  category=new DefaultMutableTreeNode("Multi-Dimensional Scaling");
  top.add(category);
  algorithm=new DefaultMutableTreeNode(new MDSDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new SammonMappingDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new IsotonicMDSDemo());
  category.add(algorithm);
  category=new DefaultMutableTreeNode("Manifold Learning");
  top.add(category);
  algorithm=new DefaultMutableTreeNode(new IsoMapDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new LLEDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new LaplacianEigenmapDemo());
  category.add(algorithm);
  category=new DefaultMutableTreeNode("Classification");
  top.add(category);
  algorithm=new DefaultMutableTreeNode(new smile.demo.classification.KNNDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new LDADemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new FLDDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new QDADemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new RDADemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new LogisticRegressionDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new NeuralNetworkDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new RBFNetworkDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new SVMDemo());
  category.add(algorithm);
  category=new DefaultMutableTreeNode("Clustering");
  top.add(category);
  algorithm=new DefaultMutableTreeNode(new HierarchicalClusteringDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new KMeansDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new XMeansDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new GMeansDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new DeterministicAnnealingDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new SOMDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new NeuralGasDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new CLARANSDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new DBScanDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new DENCLUEDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new SpectralClusteringDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new MECDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new SIBDemo());
  category.add(algorithm);
  category=new DefaultMutableTreeNode("Vector Quantization");
  top.add(category);
  algorithm=new DefaultMutableTreeNode(new GrowingNeuralGasDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new NeuralMapDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new BIRCHDemo());
  category.add(algorithm);
  category=new DefaultMutableTreeNode("Interpolation");
  top.add(category);
  algorithm=new DefaultMutableTreeNode(new Interpolation1Demo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new Interpolation2Demo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new ScatterDataInterpolationDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new LaplaceInterpolationDemo());
  category.add(algorithm);
  category=new DefaultMutableTreeNode("Distributions");
  top.add(category);
  category2=new DefaultMutableTreeNode("Discrete");
  category.add(category2);
  algorithm=new DefaultMutableTreeNode(new BernoulliDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new BinomialDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new GeometricDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new ShiftedGeometricDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new HyperGeometricDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new EmpiricalDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new NegativeBinomialDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new PoissonDistributionDemo());
  category2.add(algorithm);
  category2=new DefaultMutableTreeNode("Continuous");
  category.add(category2);
  algorithm=new DefaultMutableTreeNode(new BetaDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new ChiSquareDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new ExponentialDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new FDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new GammaDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new GaussianDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new LogNormalDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new LogisticDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new TDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new WeibullDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new GaussianMixtureDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new ExponentialFamilyMixtureDemo());
  category2.add(algorithm);
  category2=new DefaultMutableTreeNode("Multivariate");
  category.add(category2);
  algorithm=new DefaultMutableTreeNode(new MultivariateGaussianDistributionDemo());
  category2.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new MultivariateGaussianMixtureDemo());
  category2.add(algorithm);
  category=new DefaultMutableTreeNode("Wavelet");
  top.add(category);
  algorithm=new DefaultMutableTreeNode(new HaarWaveletDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new D4WaveletDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new DaubechiesWaveletDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new CoifletWaveletDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new SymmletWaveletDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new BestLocalizedWaveletDemo());
  category.add(algorithm);
  category=new DefaultMutableTreeNode("Graphics");
  top.add(category);
  algorithm=new DefaultMutableTreeNode(new ScatterPlotDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new LinePlotDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new StaircasePlotDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new BarPlotDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new BoxPlotDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new HistogramDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new Histogram3Demo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new HeatmapDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new HexmapDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new ContourDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new QQPlotDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new GridDemo());
  category.add(algorithm);
  algorithm=new DefaultMutableTreeNode(new SurfaceDemo());
  category.add(algorithm);
}
