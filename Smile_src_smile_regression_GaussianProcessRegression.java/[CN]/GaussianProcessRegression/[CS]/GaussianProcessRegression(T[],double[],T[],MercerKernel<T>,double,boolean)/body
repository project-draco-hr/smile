{
  if (x.length != y.length) {
    throw new IllegalArgumentException(String.format("The sizes of X and Y don't match: %d != %d",x.length,y.length));
  }
  if (lambda < 0.0) {
    throw new IllegalArgumentException("Invalid regularization parameter lambda = " + lambda);
  }
  this.kernel=kernel;
  this.lambda=lambda;
  this.knots=x;
  int n=x.length;
  int m=t.length;
  double[][] E=new double[n][m];
  for (int i=0; i < n; i++) {
    for (int j=0; j < m; j++) {
      E[i][j]=kernel.k(x[i],t[j]);
    }
  }
  double[][] W=new double[m][m];
  for (int i=0; i < m; i++) {
    for (int j=0; j <= i; j++) {
      W[i][j]=kernel.k(t[i],t[j]);
      W[j][i]=W[i][j];
    }
  }
  EigenValueDecomposition eigen=EigenValueDecomposition.decompose(W);
  double[][] U=eigen.getEigenVectors();
  double[][] D=eigen.getD();
  for (int i=0; i < m; i++) {
    D[i][i]=1.0 / Math.sqrt(D[i][i]);
  }
  double[][] UD=Math.abmm(U,D);
  double[][] UDUt=Math.abtmm(UD,U);
  double[][] L=Math.abmm(E,UDUt);
  double[][] LtL=Math.atamm(L);
  for (int i=0; i < m; i++) {
    LtL[i][i]+=lambda;
  }
  double[][] invLtL=Math.inverse(LtL);
  double[][] K=Math.abtmm(Math.abmm(L,invLtL),L);
  w=new double[n];
  Math.atx(K,y,w);
  for (int i=0; i < n; i++) {
    w[i]=(y[i] - w[i]) / lambda;
  }
}
