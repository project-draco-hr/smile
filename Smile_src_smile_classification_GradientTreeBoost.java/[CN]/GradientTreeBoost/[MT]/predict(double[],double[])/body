{
  if (posteriori.length != k) {
    throw new IllegalArgumentException(String.format("Invalid posteriori vector size: %d, expected: %d",posteriori.length,k));
  }
  if (k == 2) {
    double y=b;
    for (int i=0; i < T; i++) {
      y+=shrinkage * trees[i].predict(x);
    }
    posteriori[0]=1.0 / (1.0 + Math.exp(2 * y));
    posteriori[1]=1.0 - posteriori[0];
    if (y > 0) {
      return 1;
    }
 else {
      return 0;
    }
  }
 else {
    double max=Double.NEGATIVE_INFINITY;
    int y=-1;
    for (int j=0; j < k; j++) {
      posteriori[j]=0.0;
      for (int i=0; i < T; i++) {
        posteriori[j]+=shrinkage * forest[j][i].predict(x);
      }
      if (posteriori[j] > max) {
        max=posteriori[j];
        y=j;
      }
    }
    double Z=0.0;
    for (int i=0; i < k; i++) {
      posteriori[i]=Math.exp(posteriori[i] - max);
      Z+=posteriori[i];
    }
    for (int i=0; i < k; i++) {
      posteriori[i]/=Z;
    }
    return y;
  }
}
