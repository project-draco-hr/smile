{
  int m=LU.nrows();
  int n=LU.ncols();
  if (B.length != m)   throw new IllegalArgumentException(String.format("Row dimensions do not agree: A is %d x %d, but B is %d x %d",LU.nrows(),LU.ncols(),B.length,B[0].length));
  if (isSingular()) {
    throw new RuntimeException("Matrix is singular.");
  }
  if (X.length != B.length || X[0].length != B[0].length) {
    throw new IllegalArgumentException("B and X dimensions do not agree.");
  }
  int nx=B[0].length;
  if (X == B) {
    double[][] x=new double[m][];
    for (int i=0; i < m; i++) {
      x[i]=B[piv[i]];
    }
    System.arraycopy(x,0,X,0,m);
  }
 else {
    for (int i=0; i < m; i++) {
      System.arraycopy(B[piv[i]],0,X[i],0,nx);
    }
  }
  for (int k=0; k < n; k++) {
    for (int i=k + 1; i < n; i++) {
      for (int j=0; j < nx; j++) {
        X[i][j]-=X[k][j] * LU.get(i,k);
      }
    }
  }
  for (int k=n - 1; k >= 0; k--) {
    for (int j=0; j < nx; j++) {
      X[k][j]/=LU.get(k,k);
    }
    for (int i=0; i < k; i++) {
      for (int j=0; j < nx; j++) {
        X[i][j]-=X[k][j] * LU.get(i,k);
      }
    }
  }
}
