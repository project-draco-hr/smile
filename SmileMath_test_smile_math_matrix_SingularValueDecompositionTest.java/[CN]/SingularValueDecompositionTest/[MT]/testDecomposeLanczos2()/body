{
  System.out.println("decompose Lanczos m = n-3");
  double[][] A={{1.19720880,-1.8391378,0.3019585,-1.1165701,-1.7210814,0.4918882,-0.04247433},{0.06605075,1.0315583,0.8294362,-0.3646043,-1.6038017,-0.9188110,-0.63760340},{-1.02637715,1.0747931,-0.8089055,-0.4726863,-0.2064826,-0.3325532,0.17966051},{-1.45817729,-0.8942353,0.3459245,1.5068363,-2.0180708,-0.3696350,-1.19575563}};
  double[] s={3.668957,3.068763,2.179053,1.293110};
  double[][] U={{-0.4918880,0.7841689,-0.1533124,0.34586230},{-0.3688033,-0.2221466,-0.8172311,-0.38310353},{0.1037476,-0.3784190,-0.3438745,0.85310363},{-0.7818356,-0.4387814,0.4363243,0.07632262}};
  double[][] V={{0.11456074,0.63620515,-0.23901163,-0.4625536},{0.36382542,-0.54930940,-0.60614838,-0.1412273},{-0.22044591,0.06740501,-0.13539726,-0.6782114},{-0.14811938,-0.41609019,0.59161667,-0.4135324},{0.81615679,-0.00968160,0.35107473,-0.2405136},{0.09577622,0.28606564,0.28844835,0.1625626},{0.32967585,0.18412070,-0.02567023,0.2254902}};
  SingularValueDecomposition result=SingularValueDecomposition.decompose(new Matrix(A),4);
  assertTrue(Math.equals(s,result.getSingularValues(),1E-6));
  assertEquals(U.length,result.getU().length);
  for (int i=0; i < U.length; i++) {
    for (int j=0; j < U[i].length; j++) {
      assertEquals(Math.abs(U[i][j]),Math.abs(result.getU()[i][j]),1E-7);
    }
  }
  assertEquals(V.length,result.getV().length);
  for (int i=0; i < V.length; i++) {
    for (int j=0; j < V[i].length; j++) {
      assertEquals(Math.abs(V[i][j]),Math.abs(result.getV()[i][j]),1E-7);
    }
  }
}
