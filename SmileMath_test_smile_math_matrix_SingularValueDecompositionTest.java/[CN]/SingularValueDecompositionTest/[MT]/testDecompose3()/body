{
  System.out.println("decompose m = n+1");
  double[][] A={{1.19720880,-1.8391378,0.3019585,-1.1165701,-1.7210814,0.4918882},{0.06605075,1.0315583,0.8294362,-0.3646043,-1.6038017,-0.9188110},{-1.02637715,1.0747931,-0.8089055,-0.4726863,-0.2064826,-0.3325532},{-1.45817729,-0.8942353,0.3459245,1.5068363,-2.0180708,-0.3696350},{-0.07318103,-0.2783787,1.2237598,0.1995332,0.2545336,-0.1392502},{0.88248425,-0.9360321,0.1393172,0.1393281,-0.3277873,-0.5553013},{0.12641406,-0.8710055,-0.2712301,0.2296515,1.1781535,-0.2158704}};
  double[] s={3.6447007,3.1719019,2.4155022,1.6952749,1.0349052,0.6735233};
  double[][] U={{-0.66231606,0.51980064,-0.26908096,-0.33255132,0.1998343961,0.25344461},{-0.30950323,-0.38356363,-0.57342388,0.43584295,-0.2842953084,0.06773874},{0.17209598,-0.40152786,-0.25549740,-0.47194228,-0.1795895194,0.60960160},{-0.58855512,-0.52801793,0.59486615,-0.13721651,-0.0004042427,-0.01414006},{-0.06838272,0.03221968,0.14785619,0.64819245,0.3955572924,0.53374206},{-0.23683786,0.25613876,0.07459517,0.19208798,-0.7235935956,-0.10586201},{0.16959559,0.27570548,0.39014092,0.02900709,-0.4085787191,0.51310416}};
  double[][] V={{-0.08624942,0.642381656,-0.35639657,0.2600624,-0.303192728,-0.5415995},{0.46728106,-0.567452824,-0.56054543,0.1717478,0.067268188,-0.3337846},{-0.26399674,-0.005897261,-0.02438536,0.8302504,0.448103782,0.1989057},{-0.03389306,-0.296652409,0.68563317,0.2309273,-0.145824242,-0.6051146},{0.83642784,0.352498963,0.29305340,0.2264531,0.006202435,0.1973149},{0.06127719,0.230326187,0.04693098,-0.3300697,0.825499232,-0.3880689}};
  SingularValueDecomposition result=SingularValueDecomposition.decompose(A);
  assertTrue(Math.equals(s,result.getSingularValues(),1E-7));
  assertEquals(U.length,result.getU().length);
  assertEquals(U[0].length,result.getU()[0].length);
  for (int i=0; i < U.length; i++) {
    for (int j=0; j < U[i].length; j++) {
      assertEquals(Math.abs(U[i][j]),Math.abs(result.getU()[i][j]),1E-7);
    }
  }
  assertEquals(V.length,result.getV().length);
  assertEquals(V[0].length,result.getV()[0].length);
  for (int i=0; i < V.length; i++) {
    for (int j=0; j < V[i].length; j++) {
      assertEquals(Math.abs(V[i][j]),Math.abs(result.getV()[i][j]),1E-7);
    }
  }
}
