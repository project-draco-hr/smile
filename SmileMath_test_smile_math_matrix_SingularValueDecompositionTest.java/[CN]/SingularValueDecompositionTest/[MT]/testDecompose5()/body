{
  System.out.println("decompose m = n+3");
  double[][] A={{1.19720880,-1.8391378,0.3019585,-1.1165701},{0.06605075,1.0315583,0.8294362,-0.3646043},{-1.02637715,1.0747931,-0.8089055,-0.4726863},{-1.45817729,-0.8942353,0.3459245,1.5068363},{-0.07318103,-0.2783787,1.2237598,0.1995332},{0.88248425,-0.9360321,0.1393172,0.1393281},{0.12641406,-0.8710055,-0.2712301,0.2296515}};
  double[] s={3.2188437,2.5504483,1.7163918,0.9212875};
  double[][] U={{-0.7390710,0.15540183,0.093738524,-0.60555964},{0.1716777,0.26405327,-0.616548935,-0.11171885},{0.4583068,0.19615535,0.365025826,-0.56118537},{0.1185448,-0.88710768,-0.004538332,-0.24629659},{-0.1055393,-0.19831478,-0.634814754,-0.26986239},{-0.3836089,-0.06331799,0.006896881,0.41026537},{-0.2047156,-0.19326474,0.273456965,0.06389058}};
  double[][] V={{-0.5820171,0.4822386,-0.12201399,0.6432842},{0.7734720,0.4993237,-0.27962029,0.2724507},{-0.1670058,-0.1563235,-0.94966302,-0.2140379},{0.1873664,-0.7026270,-0.07117046,0.6827473}};
  SingularValueDecomposition result=SingularValueDecomposition.decompose(A);
  assertTrue(Math.equals(s,result.getSingularValues(),1E-7));
  assertEquals(U.length,result.getU().length);
  assertEquals(U[0].length,result.getU()[0].length);
  for (int i=0; i < U.length; i++) {
    for (int j=0; j < U[i].length; j++) {
      assertEquals(Math.abs(U[i][j]),Math.abs(result.getU()[i][j]),1E-7);
    }
  }
  assertEquals(V.length,result.getV().length);
  assertEquals(V[0].length,result.getV()[0].length);
  for (int i=0; i < V.length; i++) {
    for (int j=0; j < V[i].length; j++) {
      assertEquals(Math.abs(V[i][j]),Math.abs(result.getV()[i][j]),1E-7);
    }
  }
}
