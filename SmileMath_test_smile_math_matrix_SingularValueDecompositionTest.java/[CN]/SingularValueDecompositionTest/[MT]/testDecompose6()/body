{
  System.out.println("decompose m = n-1");
  double[][] A={{1.19720880,-1.8391378,0.3019585,-1.1165701,-1.7210814,0.4918882,-0.04247433},{0.06605075,1.0315583,0.8294362,-0.3646043,-1.6038017,-0.9188110,-0.63760340},{-1.02637715,1.0747931,-0.8089055,-0.4726863,-0.2064826,-0.3325532,0.17966051},{-1.45817729,-0.8942353,0.3459245,1.5068363,-2.0180708,-0.3696350,-1.19575563},{-0.07318103,-0.2783787,1.2237598,0.1995332,0.2545336,-0.1392502,-1.88207227},{0.88248425,-0.9360321,0.1393172,0.1393281,-0.3277873,-0.5553013,1.63805985}};
  double[] s={3.8244094,3.4392541,2.3784254,2.1694244,1.5150752,0.4743856,0.0};
  double[][] U={{0.31443091,0.77409564,-0.06404561,0.2362505,0.48411517,0.08732402},{0.37429954,-0.08997642,0.33948894,0.7403030,-0.37663472,-0.21598420},{-0.08460683,-0.30944648,0.49768196,0.1798789,0.40657776,0.67211259},{0.78096534,-0.13597601,0.27845058,-0.5407806,0.01748391,-0.03632677},{0.35762337,-0.18789909,-0.68652942,0.1670810,-0.20242003,0.54459792},{-0.12678093,0.49307962,0.29000123,-0.2083774,-0.64590538,0.44281315}};
  double[][] V={{-0.2062642,0.54825338,-0.27956720,0.3408979,-0.2925761,-0.412469519},{-0.2516350,-0.62127194,0.28319612,0.5322251,-0.1297528,-0.410270389},{0.3043552,0.05848409,-0.35475338,0.2434904,-0.5456797,0.040325347},{0.2047160,-0.24974630,0.01491918,-0.6588368,-0.4616580,-0.465507184},{-0.6713331,-0.30795185,-0.57548345,-0.1976943,-0.1242132,0.261610893},{-0.1122210,0.10728081,-0.28476779,-0.1527923,0.5474147,-0.612188492},{-0.5443460,0.37590198,0.55072289,-0.2115256,-0.2675392,-0.003003781}};
  SingularValueDecomposition result=SingularValueDecomposition.decompose(A);
  assertTrue(Math.equals(s,result.getSingularValues(),1E-7));
  assertEquals(U.length,result.getU().length);
  for (int i=0; i < U.length; i++) {
    for (int j=0; j < U[i].length; j++) {
      assertEquals(Math.abs(U[i][j]),Math.abs(result.getU()[i][j]),1E-7);
    }
  }
  assertEquals(V.length,result.getV().length);
  for (int i=0; i < V.length; i++) {
    for (int j=0; j < V[i].length; j++) {
      assertEquals(Math.abs(V[i][j]),Math.abs(result.getV()[i][j]),1E-7);
    }
  }
}
