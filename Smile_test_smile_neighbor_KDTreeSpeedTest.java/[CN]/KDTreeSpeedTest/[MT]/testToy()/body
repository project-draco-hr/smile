{
  System.out.println("toy data");
  long start=System.currentTimeMillis();
  double[] mu1={1.0,1.0,1.0};
  double[][] sigma1={{1.0,0.0,0.0},{0.0,1.0,0.0},{0.0,0.0,1.0}};
  double[] mu2={-2.0,-2.0,-2.0};
  double[][] sigma2={{1.0,0.3,0.8},{0.3,1.0,0.5},{0.8,0.5,1.0}};
  double[] mu3={4.0,2.0,3.0};
  double[][] sigma3={{1.0,0.8,0.3},{0.8,1.0,0.5},{0.3,0.5,1.0}};
  double[] mu4={3.0,5.0,1.0};
  double[][] sigma4={{1.0,0.5,0.5},{0.5,1.0,0.5},{0.5,0.5,1.0}};
  double[][] data=new double[10000][];
  MultivariateGaussianDistribution g1=new MultivariateGaussianDistribution(mu1,sigma1);
  for (int i=0; i < 2000; i++) {
    data[i]=g1.rand();
  }
  MultivariateGaussianDistribution g2=new MultivariateGaussianDistribution(mu2,sigma2);
  for (int i=0; i < 3000; i++) {
    data[2000 + i]=g2.rand();
  }
  MultivariateGaussianDistribution g3=new MultivariateGaussianDistribution(mu3,sigma3);
  for (int i=0; i < 3000; i++) {
    data[5000 + i]=g3.rand();
  }
  MultivariateGaussianDistribution g4=new MultivariateGaussianDistribution(mu4,sigma4);
  for (int i=0; i < 2000; i++) {
    data[8000 + i]=g4.rand();
  }
  double time=(System.currentTimeMillis() - start) / 1000.0;
  System.out.format("Generating toy data (four Gaussians): %.2fs\n",time);
  start=System.currentTimeMillis();
  KDTree<double[]> kdtree=new KDTree<double[]>(data,data);
  time=(System.currentTimeMillis() - start) / 1000.0;
  System.out.format("Building KD-tree: %.2fs\n",time);
  start=System.currentTimeMillis();
  for (int i=0; i < 1000; i++) {
    kdtree.nearest(data[Math.randomInt(data.length)]);
  }
  time=(System.currentTimeMillis() - start) / 1000.0;
  System.out.format("NN: %.2fs\n",time);
  start=System.currentTimeMillis();
  for (int i=0; i < 1000; i++) {
    kdtree.knn(data[Math.randomInt(data.length)],10);
  }
  time=(System.currentTimeMillis() - start) / 1000.0;
  System.out.format("10-NN: %.2fs\n",time);
  start=System.currentTimeMillis();
  List<Neighbor<double[],double[]>> n=new ArrayList<Neighbor<double[],double[]>>();
  for (int i=0; i < 1000; i++) {
    kdtree.range(data[Math.randomInt(data.length)],1.0,n);
    n.clear();
  }
  time=(System.currentTimeMillis() - start) / 1000.0;
  System.out.format("Range: %.2fs\n",time);
}
