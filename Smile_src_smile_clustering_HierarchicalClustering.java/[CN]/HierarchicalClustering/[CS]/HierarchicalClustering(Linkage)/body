{
  double[][] proximity=linkage.getProximity();
  int n=proximity.length;
  merge=new int[n - 1][2];
  int[] id=new int[n];
  height=new double[n - 1];
  int[] points=new int[n];
  for (int i=0; i < n; i++) {
    points[i]=i;
    id[i]=i;
  }
  FastPair fp=new FastPair(points,proximity);
  for (int i=0; i < n - 1; i++) {
    height[i]=fp.getNearestPair(merge[i]);
    linkage.merge(merge[i][0],merge[i][1]);
    fp.remove(merge[i][1]);
    fp.updatePoint(merge[i][0]);
    int p=merge[i][0];
    int q=merge[i][1];
    merge[i][0]=Math.min(id[p],id[q]);
    merge[i][1]=Math.max(id[p],id[q]);
    id[p]=n + i;
  }
  if (linkage instanceof UPGMCLinkage || linkage instanceof WPGMCLinkage || linkage instanceof WardLinkage) {
    for (int i=0; i < height.length; i++) {
      height[i]=Math.sqrt(height[i]);
    }
  }
}
