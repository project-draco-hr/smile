{
  if (x.length != y.length) {
    throw new IllegalArgumentException(String.format("The sizes of X and Y don't match: %d != %d",x.length,y.length));
  }
  if (p < 0) {
    throw new IllegalArgumentException("Invalid dimension: " + p);
  }
  if (lambda < 0) {
    throw new IllegalArgumentException("Invalid regularization factor: " + lambda);
  }
  if (tol <= 0.0) {
    throw new IllegalArgumentException("Invalid tolerance: " + tol);
  }
  if (maxIter <= 0) {
    throw new IllegalArgumentException("Invalid maximum number of iterations: " + maxIter);
  }
  this.p=p;
  int[] labels=Math.unique(y);
  Arrays.sort(labels);
  for (int i=0; i < labels.length; i++) {
    if (labels[i] < 0) {
      throw new IllegalArgumentException("Negative class label: " + labels[i]);
    }
    if (i > 0 && labels[i] - labels[i - 1] > 1) {
      throw new IllegalArgumentException("Missing class: " + labels[i] + 1);
    }
  }
  k=labels.length;
  if (k < 2) {
    throw new IllegalArgumentException("Only one class.");
  }
  if (k == 2) {
    BinaryObjectiveFunction func=new BinaryObjectiveFunction(x,y,lambda);
    w=new double[p + 1];
    L=0.0;
    try {
      L=-Math.min(func,5,w,tol,maxIter);
    }
 catch (    Exception ex) {
      System.err.println(ex);
    }
  }
 else {
    MultiClassObjectiveFunction func=new MultiClassObjectiveFunction(x,y,k,p,lambda);
    w=new double[k * (p + 1)];
    L=0.0;
    try {
      L=-Math.min(func,5,w,tol,maxIter);
    }
 catch (    Exception ex) {
      System.err.println(ex);
    }
    W=new double[k][p + 1];
    for (int i=0, m=0; i < k; i++) {
      for (int j=0; j <= p; j++, m++) {
        W[i][j]=w[m];
      }
    }
    w=null;
  }
}
