{
  System.out.println("USPS");
  DelimitedTextParser parser=new DelimitedTextParser();
  parser.setResponseIndex(new NominalAttribute("class"),0);
  try {
    AttributeDataset train=parser.parse("USPS Train",this.getClass().getResourceAsStream("/smile/data/usps/zip.train"));
    AttributeDataset test=parser.parse("USPS Test",this.getClass().getResourceAsStream("/smile/data/usps/zip.test"));
    double[][] x=train.toArray(new double[train.size()][]);
    int[] y=train.toArray(new int[train.size()]);
    double[][] testx=test.toArray(new double[test.size()][]);
    int[] testy=test.toArray(new int[test.size()]);
    AdjustedRandIndex ari=new AdjustedRandIndex();
    RandIndex rand=new RandIndex();
    GMeans gmeans=new GMeans(x,10);
    double r=rand.measure(y,gmeans.getClusterLabel());
    double r2=ari.measure(y,gmeans.getClusterLabel());
    System.out.format("Training rand index = %.2f%%\tadjusted rand index = %.2f%%\n",100.0 * r,100.0 * r2);
    assertTrue(r > 0.85);
    assertTrue(r2 > 0.4);
    int[] p=new int[testx.length];
    for (int i=0; i < testx.length; i++) {
      p[i]=gmeans.predict(testx[i]);
    }
    r=rand.measure(testy,p);
    r2=ari.measure(testy,p);
    System.out.format("Testing rand index = %.2f%%\tadjusted rand index = %.2f%%\n",100.0 * r,100.0 * r2);
    assertTrue(r > 0.85);
    assertTrue(r2 > 0.4);
  }
 catch (  Exception ex) {
    System.err.println(ex);
  }
}
