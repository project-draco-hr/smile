{
  int N=x.length;
  int label=-1;
  boolean pure=true;
  for (int i=0; i < N; i++) {
    if (samples[i] > 0) {
      if (label == -1) {
        label=y[i];
      }
 else       if (y[i] != label) {
        pure=false;
        break;
      }
    }
  }
  if (pure) {
    return false;
  }
  int n=0;
  for (  int s : samples) {
    n+=s;
  }
  if (n <= nodeSize) {
    return false;
  }
  int[] count=new int[k];
  int[] falseCount=new int[k];
  for (int i=0; i < N; i++) {
    if (samples[i] > 0) {
      count[y[i]]+=samples[i];
    }
  }
  double impurity=impurity(count,n);
  int p=attributes.length;
  int[] variables=new int[p];
  for (int i=0; i < p; i++) {
    variables[i]=i;
  }
  if (mtry < p) {
    Math.permutate(variables);
    for (int j=0; j < mtry; j++) {
      Node split=findBestSplit(n,count,falseCount,impurity,variables[j]);
      if (split.splitScore > node.splitScore) {
        node.splitFeature=split.splitFeature;
        node.splitValue=split.splitValue;
        node.splitScore=split.splitScore;
        node.trueChildOutput=split.trueChildOutput;
        node.falseChildOutput=split.falseChildOutput;
      }
    }
  }
 else {
    List<SplitTask> tasks=new ArrayList<SplitTask>(mtry);
    for (int j=0; j < mtry; j++) {
      tasks.add(new SplitTask(n,count,impurity,variables[j]));
    }
    try {
      for (      Node split : MulticoreExecutor.run(tasks)) {
        if (split.splitScore > node.splitScore) {
          node.splitFeature=split.splitFeature;
          node.splitValue=split.splitValue;
          node.splitScore=split.splitScore;
          node.trueChildOutput=split.trueChildOutput;
          node.falseChildOutput=split.falseChildOutput;
        }
      }
    }
 catch (    Exception ex) {
      for (int j=0; j < mtry; j++) {
        Node split=findBestSplit(n,count,falseCount,impurity,variables[j]);
        if (split.splitScore > node.splitScore) {
          node.splitFeature=split.splitFeature;
          node.splitValue=split.splitValue;
          node.splitScore=split.splitScore;
          node.trueChildOutput=split.trueChildOutput;
          node.falseChildOutput=split.falseChildOutput;
        }
      }
    }
  }
  return (node.splitFeature != -1);
}
