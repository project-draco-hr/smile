{
  if (node.splitFeature < 0) {
    throw new IllegalStateException("Split a node with invalid feature.");
  }
  int n=x.length;
  int tc=0;
  int fc=0;
  int[] trueSamples=new int[n];
  int[] falseSamples=new int[n];
  if (attributes[node.splitFeature].getType() == Attribute.Type.NOMINAL) {
    for (int i=0; i < n; i++) {
      if (samples[i] > 0) {
        if (x[i][node.splitFeature] == node.splitValue) {
          trueSamples[i]=samples[i];
          tc+=samples[i];
        }
 else {
          falseSamples[i]=samples[i];
          fc+=samples[i];
        }
      }
    }
  }
 else   if (attributes[node.splitFeature].getType() == Attribute.Type.NUMERIC) {
    for (int i=0; i < n; i++) {
      if (samples[i] > 0) {
        if (x[i][node.splitFeature] <= node.splitValue) {
          trueSamples[i]=samples[i];
          tc+=samples[i];
        }
 else {
          falseSamples[i]=samples[i];
          fc+=samples[i];
        }
      }
    }
  }
 else {
    throw new IllegalStateException("Unsupported attribute type: " + attributes[node.splitFeature].getType());
  }
  if (tc == 0 || fc == 0) {
    node.splitFeature=-1;
    node.splitValue=Double.NaN;
    node.splitScore=0.0;
    return false;
  }
  double[] trueChildPosteriori=new double[k];
  double[] falseChildPosteriori=new double[k];
  for (int i=0; i < n; i++) {
    int yi=y[i];
    trueChildPosteriori[yi]+=trueSamples[i];
    falseChildPosteriori[yi]+=falseSamples[i];
  }
  for (int i=0; i < k; i++) {
    trueChildPosteriori[i]=(trueChildPosteriori[i] + 1) / (tc + k);
    falseChildPosteriori[i]=(falseChildPosteriori[i] + 1) / (fc + k);
  }
  node.trueChild=new Node(node.trueChildOutput,trueChildPosteriori);
  node.falseChild=new Node(node.falseChildOutput,falseChildPosteriori);
  TrainNode trueChild=new TrainNode(node.trueChild,x,y,trueSamples);
  if (trueChild.findBestSplit()) {
    if (nextSplits != null) {
      nextSplits.add(trueChild);
    }
 else {
      trueChild.split(null);
    }
  }
  TrainNode falseChild=new TrainNode(node.falseChild,x,y,falseSamples);
  if (falseChild.findBestSplit()) {
    if (nextSplits != null) {
      nextSplits.add(falseChild);
    }
 else {
      falseChild.split(null);
    }
  }
  importance[node.splitFeature]+=node.splitScore;
  return true;
}
