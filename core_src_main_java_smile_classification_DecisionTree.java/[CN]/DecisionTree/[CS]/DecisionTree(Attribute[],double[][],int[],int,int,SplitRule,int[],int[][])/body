{
  if (x.length != y.length) {
    throw new IllegalArgumentException(String.format("The sizes of X and Y don't match: %d != %d",x.length,y.length));
  }
  if (M <= 0 || M > x[0].length) {
    throw new IllegalArgumentException("Invalid number of variables to split on at a node of the tree: " + M);
  }
  if (samples == null) {
    throw new IllegalArgumentException("Sampling array is null.");
  }
  this.k=Math.max(y) + 1;
  if (k < 2) {
    throw new IllegalArgumentException("Only one class or negative class labels.");
  }
  if (attributes == null) {
    int p=x[0].length;
    attributes=new Attribute[p];
    for (int i=0; i < p; i++) {
      attributes[i]=new NumericAttribute("V" + (i + 1));
    }
  }
  this.attributes=attributes;
  this.M=M;
  this.J=J;
  this.rule=rule;
  this.order=order;
  importance=new double[attributes.length];
  int n=y.length;
  int[] count=new int[k];
  for (int i=0; i < n; i++) {
    count[y[i]]+=samples[i];
  }
  double[] posteriori=new double[k];
  for (int i=0; i < k; i++) {
    posteriori[i]=(double)count[i] / n;
  }
  root=new Node(Math.whichMax(count),posteriori);
  TrainNode trainRoot=new TrainNode(root,x,y,samples);
  if (trainRoot.findBestSplit()) {
    trainRoot.split(null);
  }
}
