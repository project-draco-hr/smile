{
  super(color);
  int n=merge.length + 1;
  int[] order=new int[n];
  dfs(merge,n - 2,order,0);
  double[][] pos=new double[2 * n - 1][2];
  for (int i=0; i < n; i++) {
    pos[order[i]][0]=i;
    pos[order[i]][1]=0;
  }
  for (int i=0; i < merge.length; i++) {
    pos[n + i][0]=(pos[merge[i][0]][0] + pos[merge[i][1]][0]) / 2;
    pos[n + i][1]=Math.max(pos[merge[i][0]][1],pos[merge[i][1]][1]) + height[i];
  }
  p1=new double[3 * n - 3][2];
  p2=new double[3 * n - 3][2];
  for (int i=0; i < merge.length; i++) {
    p1[3 * i][0]=pos[merge[i][0]][0];
    p1[3 * i][1]=pos[merge[i][0]][1];
    p2[3 * i][0]=pos[merge[i][0]][0];
    p2[3 * i][1]=pos[n + i][1];
    p1[3 * i + 1][0]=pos[merge[i][1]][0];
    p1[3 * i + 1][1]=pos[merge[i][1]][1];
    p2[3 * i + 1][0]=pos[merge[i][1]][0];
    p2[3 * i + 1][1]=pos[n + i][1];
    p1[3 * i + 2][0]=pos[merge[i][0]][0];
    p1[3 * i + 2][1]=pos[n + i][1];
    p2[3 * i + 2][0]=pos[merge[i][1]][0];
    p2[3 * i + 2][1]=pos[n + i][1];
  }
  this.height=pos[2 * n - 2][1];
}
