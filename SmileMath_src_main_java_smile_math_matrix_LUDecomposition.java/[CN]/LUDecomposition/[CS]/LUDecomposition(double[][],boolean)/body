{
  int m=A.length;
  int n=A[0].length;
  LU=A;
  if (!overwrite) {
    LU=new double[m][n];
    for (int i=0; i < m; i++)     System.arraycopy(A[i],0,LU[i],0,n);
  }
  piv=new int[m];
  for (int i=0; i < m; i++) {
    piv[i]=i;
  }
  pivsign=1;
  double[] LUrowi;
  double[] LUcolj=new double[m];
  for (int j=0; j < n; j++) {
    for (int i=0; i < m; i++) {
      LUcolj[i]=LU[i][j];
    }
    for (int i=0; i < m; i++) {
      LUrowi=LU[i];
      int kmax=Math.min(i,j);
      double s=0.0;
      for (int k=0; k < kmax; k++) {
        s+=LUrowi[k] * LUcolj[k];
      }
      LUrowi[j]=LUcolj[i]-=s;
    }
    int p=j;
    for (int i=j + 1; i < m; i++) {
      if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {
        p=i;
      }
    }
    if (p != j) {
      for (int k=0; k < n; k++) {
        double t=LU[p][k];
        LU[p][k]=LU[j][k];
        LU[j][k]=t;
      }
      int k=piv[p];
      piv[p]=piv[j];
      piv[j]=k;
      pivsign=-pivsign;
    }
    if (j < m & LU[j][j] != 0.0) {
      for (int i=j + 1; i < m; i++) {
        LU[i][j]/=LU[j][j];
      }
    }
  }
}
