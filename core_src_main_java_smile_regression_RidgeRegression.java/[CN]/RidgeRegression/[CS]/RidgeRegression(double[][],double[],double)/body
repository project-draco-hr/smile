{
  if (x.length != y.length) {
    throw new IllegalArgumentException(String.format("The sizes of X and Y don't match: %d != %d",x.length,y.length));
  }
  if (lambda < 0.0) {
    throw new IllegalArgumentException("Invalid shrinkage/regularization parameter lambda = " + lambda);
  }
  int n=x.length;
  p=x[0].length;
  ym=Math.mean(y);
  center=Math.colMean(x);
  double[][] X=new double[n][p];
  for (int i=0; i < n; i++) {
    for (int j=0; j < p; j++) {
      X[i][j]=x[i][j] - center[j];
    }
  }
  scale=new double[p];
  for (int j=0; j < p; j++) {
    for (int i=0; i < n; i++) {
      scale[j]+=Math.sqr(X[i][j]);
    }
    scale[j]=Math.sqrt(scale[j] / n);
  }
  for (int i=0; i < n; i++) {
    for (int j=0; j < p; j++) {
      X[i][j]/=scale[j];
    }
  }
  w=new double[p];
  Math.atx(X,y,w);
  double[][] XtX=Math.atamm(X);
  for (int i=0; i < p; i++) {
    XtX[i][i]+=lambda;
  }
  CholeskyDecomposition cholesky=new CholeskyDecomposition(XtX);
  cholesky.solve(w);
  for (int j=0; j < p; j++) {
    w[j]/=scale[j];
  }
  b=ym - Math.dot(w,center);
  double[] yhat=new double[n];
  Math.ax(x,w,yhat);
  double TSS=0.0;
  RSS=0.0;
  double ybar=Math.mean(y);
  residuals=new double[n];
  for (int i=0; i < n; i++) {
    double r=y[i] - yhat[i] - b;
    residuals[i]=r;
    RSS+=Math.sqr(r);
    TSS+=Math.sqr(y[i] - ybar);
  }
  error=Math.sqrt(RSS / (n - p - 1));
  df=n - p - 1;
  RSquared=1.0 - RSS / TSS;
  adjustedRSquared=1.0 - ((1 - RSquared) * (n - 1) / (n - p - 1));
  F=(TSS - RSS) * (n - p - 1) / (RSS * p);
  int df1=p;
  int df2=n - p - 1;
  pvalue=Beta.regularizedIncompleteBetaFunction(0.5 * df2,0.5 * df1,df2 / (df2 + df1 * F));
  double[][] inv=cholesky.inverse();
  coefficients=new double[p][4];
  for (int i=0; i < p; i++) {
    coefficients[i][0]=w[i];
    double se=error * Math.sqrt(inv[i][i]);
    coefficients[i][1]=se;
    double t=w[i] / se;
    coefficients[i][2]=t;
    coefficients[i][3]=Beta.regularizedIncompleteBetaFunction(0.5 * df,0.5,df / (df + t * t));
  }
}
