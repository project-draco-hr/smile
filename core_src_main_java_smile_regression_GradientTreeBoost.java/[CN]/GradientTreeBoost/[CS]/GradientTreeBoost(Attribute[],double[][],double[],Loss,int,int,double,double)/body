{
  if (x.length != y.length) {
    throw new IllegalArgumentException(String.format("The sizes of X and Y don't match: %d != %d",x.length,y.length));
  }
  if (shrinkage <= 0 || shrinkage > 1) {
    throw new IllegalArgumentException("Invalid shrinkage: " + shrinkage);
  }
  if (f <= 0 || f > 1) {
    throw new IllegalArgumentException("Invalid sampling fraction: " + f);
  }
  if (attributes == null) {
    int p=x[0].length;
    attributes=new Attribute[p];
    for (int i=0; i < p; i++) {
      attributes[i]=new NumericAttribute("V" + (i + 1));
    }
  }
  this.loss=loss;
  this.ntrees=ntrees;
  this.maxNodes=maxNodes;
  this.shrinkage=shrinkage;
  this.f=f;
  int n=x.length;
  int N=(int)Math.round(n * f);
  int[] perm=new int[n];
  int[] samples=new int[n];
  for (int i=0; i < n; i++) {
    perm[i]=i;
  }
  double[] residual=new double[n];
  double[] response=null;
  RegressionTree.NodeOutput output=null;
  if (loss == Loss.LeastSquares) {
    response=residual;
    b=Math.mean(y);
    for (int i=0; i < n; i++) {
      residual[i]=y[i] - b;
    }
  }
 else   if (loss == Loss.LeastAbsoluteDeviation) {
    output=new LADNodeOutput(residual);
    System.arraycopy(y,0,residual,0,n);
    b=QuickSelect.median(residual);
    response=new double[n];
    for (int i=0; i < n; i++) {
      residual[i]=y[i] - b;
      response[i]=Math.signum(residual[i]);
    }
  }
 else   if (loss == Loss.Huber) {
    response=new double[n];
    System.arraycopy(y,0,residual,0,n);
    b=QuickSelect.median(residual);
    for (int i=0; i < n; i++) {
      residual[i]=y[i] - b;
    }
  }
  int[][] order=SmileUtils.sort(attributes,x);
  trees=new RegressionTree[ntrees];
  for (int m=0; m < ntrees; m++) {
    Arrays.fill(samples,0);
    Math.permutate(perm);
    for (int i=0; i < N; i++) {
      samples[perm[i]]=1;
    }
    if (loss == Loss.Huber) {
      output=new HuberNodeOutput(residual,response,0.9);
    }
    trees[m]=new RegressionTree(attributes,x,response,maxNodes,5,x[0].length,order,samples,output);
    for (int i=0; i < n; i++) {
      residual[i]-=shrinkage * trees[m].predict(x[i]);
      if (loss == Loss.LeastAbsoluteDeviation) {
        response[i]=Math.signum(residual[i]);
      }
    }
  }
  importance=new double[attributes.length];
  for (  RegressionTree tree : trees) {
    double[] imp=tree.importance();
    for (int i=0; i < imp.length; i++) {
      importance[i]+=imp[i];
    }
  }
}
