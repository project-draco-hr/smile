{
  if (k == 2) {
    if (svm.platt == null) {
      throw new UnsupportedOperationException("PlattScaling was not trained yet. Please call SVM.trainPlattScaling() first.");
    }
    double y=svm.predict(x);
    prob[1]=posterior(svm,y);
    prob[0]=1.0 - prob[1];
    if (y > 0) {
      return 1;
    }
 else {
      return 0;
    }
  }
 else   if (strategy == Multiclass.ONE_VS_ALL) {
    int label=0;
    double maxf=Double.NEGATIVE_INFINITY;
    for (int i=0; i < svms.size(); i++) {
      LASVM svm=svms.get(i);
      if (svm.platt == null) {
        throw new UnsupportedOperationException("PlattScaling was not trained yet. Please call SVM.trainPlattScaling() first.");
      }
      double f=svm.predict(x);
      prob[i]=posterior(svm,f);
      if (f > maxf) {
        label=i;
        maxf=f;
      }
    }
    smile.math.Math.unitize1(prob);
    return label;
  }
 else {
    int[] count=new int[k];
    double[][] r=new double[k][k];
    for (int i=0, m=0; i < k; i++) {
      for (int j=i + 1; j < k; j++, m++) {
        LASVM svm=svms.get(m);
        if (svm.platt == null) {
          throw new UnsupportedOperationException("PlattScaling was not trained yet. Please call SVM.trainPlattScaling() first.");
        }
        double f=svm.predict(x);
        r[i][j]=posterior(svm,f);
        r[j][i]=1.0 - r[i][j];
        if (f > 0) {
          count[i]++;
        }
 else {
          count[j]++;
        }
      }
    }
    PlattScaling.multiclass(k,r,prob);
    int max=0;
    int label=0;
    for (int i=0; i < k; i++) {
      if (count[i] > max) {
        max=count[i];
        label=i;
      }
    }
    return label;
  }
}
