{
  if (k == 2) {
    svm.trainPlattScaling(x,y);
  }
 else   if (strategy == Multiclass.ONE_VS_ALL) {
    List<PlattScalingTask> tasks=new ArrayList<>(svms.size());
    for (int m=0; m < svms.size(); m++) {
      LASVM s=svms.get(m);
      int l=y.length;
      int[] yi=new int[l];
      for (int i=0; i < l; i++) {
        if (y[i] == m)         yi[i]=+1;
 else         yi[i]=-1;
      }
      tasks.add(new PlattScalingTask(s,x,yi));
    }
    try {
      MulticoreExecutor.run(tasks);
    }
 catch (    Exception e) {
      logger.error("Failed to train Platt Scaling on multi-core",e);
    }
  }
 else {
    List<PlattScalingTask> tasks=new ArrayList<>(svms.size());
    for (int i=0, m=0; i < k; i++) {
      for (int j=i + 1; j < k; j++, m++) {
        LASVM s=svms.get(m);
        int l=y.length;
        int[] yi=new int[l];
        for (int p=0; p < l; p++) {
          if (y[p] == i)           yi[p]=+1;
 else           yi[p]=-1;
        }
        tasks.add(new PlattScalingTask(s,x,yi));
      }
    }
    try {
      MulticoreExecutor.run(tasks);
    }
 catch (    Exception e) {
      logger.error("Failed to train Platt Scaling on multi-core",e);
    }
  }
}
