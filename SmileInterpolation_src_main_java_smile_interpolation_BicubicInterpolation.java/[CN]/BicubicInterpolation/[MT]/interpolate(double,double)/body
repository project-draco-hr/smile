{
  int j=x1terp.search(x1p);
  int k=x2terp.search(x2p);
  double x1l=x1[j];
  double x1u=x1[j + 1];
  double x2l=x2[k];
  double x2u=x2[k + 1];
  y[0]=yv[j][k];
  y[1]=yv[j + 1][k];
  y[2]=yv[j + 1][k + 1];
  y[3]=yv[j][k + 1];
  y1[0]=(j - 1 < 0) ? (yv[j + 1][k] - yv[j][k]) / (x1[j + 1] - x1[j]) : (yv[j + 1][k] - yv[j - 1][k]) / (x1[j + 1] - x1[j - 1]);
  y1[1]=(j + 2 < m) ? (yv[j + 2][k] - yv[j][k]) / (x1[j + 2] - x1[j]) : (yv[j + 1][k] - yv[j][k]) / (x1[j + 1] - x1[j]);
  y1[2]=(j + 2 < m) ? (yv[j + 2][k + 1] - yv[j][k + 1]) / (x1[j + 2] - x1[j]) : (yv[j + 1][k + 1] - yv[j][k + 1]) / (x1[j + 1] - x1[j]);
  y1[3]=(j - 1 < 0) ? (yv[j + 1][k + 1] - yv[j][k + 1]) / (x1[j + 1] - x1[j]) : (yv[j + 1][k + 1] - yv[j - 1][k + 1]) / (x1[j + 1] - x1[j - 1]);
  y2[0]=(k - 1 < 0) ? (yv[j][k + 1] - yv[j][k]) / (x2[k + 1] - x2[k]) : (yv[j][k + 1] - yv[j][k - 1]) / (x2[k + 1] - x2[k - 1]);
  y2[1]=(k - 1 < 0) ? (yv[j + 1][k + 1] - yv[j + 1][k]) / (x2[k + 1] - x2[k]) : (yv[j + 1][k + 1] - yv[j + 1][k - 1]) / (x2[k + 1] - x2[k - 1]);
  y2[2]=(k + 2 < n) ? (yv[j + 1][k + 2] - yv[j + 1][k]) / (x2[k + 2] - x2[k]) : (yv[j + 1][k + 1] - yv[j + 1][k]) / (x2[k + 1] - x2[k]);
  y2[3]=(k + 2 < n) ? (yv[j][k + 2] - yv[j][k]) / (x2[k + 2] - x2[k]) : (yv[j][k + 1] - yv[j][k]) / (x2[k + 1] - x2[k]);
  if (k - 1 < 0 && j - 1 < 0)   y12[0]=(yv[j + 1][k + 1] - yv[j + 1][k] - yv[j][k + 1] + yv[j][k]) / ((x1[j + 1] - x1[j]) * (x2[k + 1] - x2[k]));
 else   if (k - 1 < 0)   y12[0]=(yv[j + 1][k + 1] - yv[j + 1][k] - yv[j - 1][k + 1] + yv[j - 1][k]) / ((x1[j + 1] - x1[j - 1]) * (x2[k + 1] - x2[k]));
 else   if (j - 1 < 0)   y12[0]=(yv[j + 1][k + 1] - yv[j + 1][k - 1] - yv[j][k + 1] + yv[j][k - 1]) / ((x1[j + 1] - x1[j]) * (x2[k + 1] - x2[k - 1]));
 else   y12[0]=(yv[j + 1][k + 1] - yv[j + 1][k - 1] - yv[j - 1][k + 1] + yv[j - 1][k - 1]) / ((x1[j + 1] - x1[j - 1]) * (x2[k + 1] - x2[k - 1]));
  if (j + 2 < m) {
    if (k - 1 < 0) {
      y12[1]=(yv[j + 2][k + 1] - yv[j + 2][k] - yv[j][k + 1] + yv[j][k]) / ((x1[j + 2] - x1[j]) * (x2[k + 1] - x2[k]));
    }
 else {
      y12[1]=(yv[j + 2][k + 1] - yv[j + 2][k - 1] - yv[j][k + 1] + yv[j][k - 1]) / ((x1[j + 2] - x1[j]) * (x2[k + 1] - x2[k - 1]));
    }
  }
 else {
    if (k - 1 < 0) {
      y12[1]=(yv[j + 1][k + 1] - yv[j + 1][k] - yv[j][k + 1] + yv[j][k]) / ((x1[j + 1] - x1[j]) * (x2[k + 1] - x2[k]));
    }
 else {
      y12[1]=(yv[j + 1][k + 1] - yv[j + 1][k - 1] - yv[j][k + 1] + yv[j][k - 1]) / ((x1[j + 1] - x1[j]) * (x2[k + 1] - x2[k - 1]));
    }
  }
  if (j + 2 < m && k + 2 < n) {
    y12[2]=(yv[j + 2][k + 2] - yv[j + 2][k] - yv[j][k + 2] + yv[j][k]) / ((x1[j + 2] - x1[j]) * (x2[k + 2] - x2[k]));
  }
 else   if (j + 2 < m) {
    y12[2]=(yv[j + 2][k + 1] - yv[j + 2][k] - yv[j][k + 1] + yv[j][k]) / ((x1[j + 2] - x1[j]) * (x2[k + 1] - x2[k]));
  }
 else   if (k + 2 < n) {
    y12[2]=(yv[j + 1][k + 2] - yv[j + 1][k] - yv[j][k + 2] + yv[j][k]) / ((x1[j + 1] - x1[j]) * (x2[k + 2] - x2[k]));
  }
 else {
    y12[2]=(yv[j + 1][k + 1] - yv[j + 1][k] - yv[j][k + 1] + yv[j][k]) / ((x1[j + 1] - x1[j]) * (x2[k + 1] - x2[k]));
  }
  if (k + 2 < n) {
    if (j - 1 < 0) {
      y12[3]=(yv[j + 1][k + 2] - yv[j + 1][k] - yv[j][k + 2] + yv[j][k]) / ((x1[j + 1] - x1[j]) * (x2[k + 2] - x2[k]));
    }
 else {
      y12[3]=(yv[j + 1][k + 2] - yv[j + 1][k] - yv[j - 1][k + 2] + yv[j - 1][k]) / ((x1[j + 1] - x1[j - 1]) * (x2[k + 2] - x2[k]));
    }
  }
 else {
    if (j - 1 < 0) {
      y12[3]=(yv[j + 1][k + 1] - yv[j + 1][k] - yv[j][k + 1] + yv[j][k]) / ((x1[j + 1] - x1[j]) * (x2[k + 1] - x2[k]));
    }
 else {
      y12[3]=(yv[j + 1][k + 1] - yv[j + 1][k] - yv[j - 1][k + 1] + yv[j - 1][k]) / ((x1[j + 1] - x1[j - 1]) * (x2[k + 1] - x2[k]));
    }
  }
  return bcuint(y,y1,y2,y12,x1l,x1u,x2l,x2u,x1p,x2p);
}
