{
  double f=0.0;
  double[] prob=new double[k];
  Arrays.fill(g,0.0);
  int n=x.length;
  int m=MulticoreExecutor.getThreadPoolSize();
  if (n < 1000 || m < 2) {
    for (int i=0; i < n; i++) {
      for (int j=0; j < k; j++) {
        prob[j]=dot(x[i],w,j,p);
      }
      softmax(prob);
      f-=log(prob[y[i]]);
      double yi=0.0;
      for (int j=0; j < k; j++) {
        yi=(y[i] == j ? 1.0 : 0.0) - prob[j];
        int pos=j * (p + 1);
        for (        int l : x[i]) {
          g[pos + l]-=yi;
        }
        g[pos + p]-=yi;
      }
    }
  }
 else {
    List<GTask> tasks=new ArrayList<GTask>(m + 1);
    int step=n / m;
    if (step < 100) {
      step=100;
    }
    int start=0;
    int end=step;
    for (int i=0; i < m - 1; i++) {
      tasks.add(new GTask(w,start,end));
      start+=step;
      end+=step;
    }
    tasks.add(new GTask(w,start,n));
    try {
      for (      double[] gi : MulticoreExecutor.run(tasks)) {
        f+=gi[w.length];
        for (int i=0; i < w.length; i++) {
          g[i]+=gi[i];
        }
      }
    }
 catch (    Exception ex) {
      for (int i=0; i < n; i++) {
        for (int j=0; j < k; j++) {
          prob[j]=dot(x[i],w,j,p);
        }
        softmax(prob);
        f-=log(prob[y[i]]);
        double yi=0.0;
        for (int j=0; j < k; j++) {
          yi=(y[i] == j ? 1.0 : 0.0) - prob[j];
          int pos=j * (p + 1);
          for (          int l : x[i]) {
            g[pos + l]-=yi;
          }
          g[pos + p]-=yi;
        }
      }
    }
  }
  if (lambda != 0.0) {
    double wnorm=0.0;
    for (int i=0; i < k; i++) {
      for (int j=0; j < p; j++) {
        int pos=i * (p + 1) + j;
        wnorm+=w[pos] * w[pos];
        g[pos]+=lambda * w[pos];
      }
    }
    f+=0.5 * lambda * wnorm;
  }
  return f;
}
