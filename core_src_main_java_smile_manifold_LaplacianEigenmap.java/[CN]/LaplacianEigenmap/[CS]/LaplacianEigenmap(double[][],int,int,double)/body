{
  this.t=t;
  int n=data.length;
  KNNSearch<double[],double[]> knn=null;
  if (data[0].length < 10) {
    knn=new KDTree<>(data,data);
  }
 else {
    knn=new CoverTree<>(data,new EuclideanDistance());
  }
  graph=new AdjacencyList(n);
  for (int i=0; i < n; i++) {
    Neighbor<double[],double[]>[] neighbors=knn.knn(data[i],k);
    for (int j=0; j < k; j++) {
      graph.setWeight(i,neighbors[j].index,neighbors[j].distance);
    }
  }
  int[][] cc=graph.bfs();
  if (cc.length == 1) {
    index=new int[n];
    for (int i=0; i < n; i++) {
      index[i]=i;
    }
  }
 else {
    n=0;
    int component=0;
    for (int i=0; i < cc.length; i++) {
      if (cc[i].length > n) {
        component=i;
        n=cc[i].length;
      }
    }
    logger.info("Laplacian Eigenmap: {} connected components, largest one has {} samples.",cc.length,n);
    index=cc[component];
    graph=graph.subgraph(index);
  }
  SparseDataset W=new SparseDataset(n);
  double[] D=new double[n];
  if (t <= 0) {
    for (int i=0; i < n; i++) {
      W.set(i,i,1.0);
      Collection<Edge> edges=graph.getEdges(i);
      for (      Edge edge : edges) {
        int j=edge.v2;
        if (i == j) {
          j=edge.v1;
        }
        W.set(i,j,1.0);
        D[i]+=1.0;
      }
      D[i]=1 / Math.sqrt(D[i]);
    }
  }
 else {
    double gamma=-1.0 / t;
    for (int i=0; i < n; i++) {
      W.set(i,i,1.0);
      Collection<Edge> edges=graph.getEdges(i);
      for (      Edge edge : edges) {
        int j=edge.v2;
        if (i == j) {
          j=edge.v1;
        }
        double w=Math.exp(gamma * Math.sqr(edge.weight));
        W.set(i,j,w);
        D[i]+=w;
      }
      D[i]=1 / Math.sqrt(D[i]);
    }
  }
  SparseMatrix L=W.toSparseMatrix();
  for (int i=0; i < n; i++) {
    SparseArray edges=W.get(i).x;
    for (    SparseArray.Entry edge : edges) {
      int j=edge.i;
      double s=D[i] * edge.x * D[j];
      L.set(i,j,s);
    }
    L.set(i,i,-1.0);
  }
  double[] v=new double[n];
  for (int i=0; i < n; i++) {
    v[i]=Math.random();
  }
  double lambda=-Math.eigen(L,v,1E-6);
  for (int i=0; i < n; i++) {
    L.set(i,i,lambda - 1.0);
  }
  EigenValueDecomposition eigen=EigenValueDecomposition.decompose(L,d + 1);
  coordinates=new double[n][d];
  for (int j=0; j < d; j++) {
    double norm=0.0;
    for (int i=0; i < n; i++) {
      coordinates[i][j]=eigen.getEigenVectors()[i][j + 1] * D[i];
      norm+=coordinates[i][j] * coordinates[i][j];
    }
    norm=Math.sqrt(norm);
    for (int i=0; i < n; i++) {
      coordinates[i][j]/=norm;
    }
  }
}
