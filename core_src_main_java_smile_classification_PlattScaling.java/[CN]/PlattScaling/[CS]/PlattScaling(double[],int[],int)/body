{
  int l=scores.length;
  double prior1=0, prior0=0;
  int i;
  for (i=0; i < l; i++) {
    if (y[i] > 0)     prior1+=1;
 else     prior0+=1;
  }
  double min_step=1e-10;
  double sigma=1e-12;
  double eps=1e-5;
  double hiTarget=(prior1 + 1.0) / (prior1 + 2.0);
  double loTarget=1 / (prior0 + 2.0);
  double[] t=new double[l];
  alpha=0.0;
  beta=Math.log((prior0 + 1.0) / (prior1 + 1.0));
  double fval=0.0;
  for (i=0; i < l; i++) {
    if (y[i] > 0)     t[i]=hiTarget;
 else     t[i]=loTarget;
    double fApB=scores[i] * alpha + beta;
    if (fApB >= 0)     fval+=t[i] * fApB + log(1 + exp(-fApB));
 else     fval+=(t[i] - 1) * fApB + log(1 + exp(fApB));
  }
  int iter=0;
  for (; iter < maxIters; iter++) {
    double h11=sigma;
    double h22=sigma;
    double h21=0.0;
    double g1=0.0;
    double g2=0.0;
    for (i=0; i < l; i++) {
      double fApB=scores[i] * alpha + beta;
      double p, q;
      if (fApB >= 0) {
        p=exp(-fApB) / (1.0 + exp(-fApB));
        q=1.0 / (1.0 + exp(-fApB));
      }
 else {
        p=1.0 / (1.0 + exp(fApB));
        q=exp(fApB) / (1.0 + exp(fApB));
      }
      double d2=p * q;
      h11+=scores[i] * scores[i] * d2;
      h22+=d2;
      h21+=scores[i] * d2;
      double d1=t[i] - p;
      g1+=scores[i] * d1;
      g2+=d1;
    }
    if (abs(g1) < eps && abs(g2) < eps)     break;
    double det=h11 * h22 - h21 * h21;
    double dA=-(h22 * g1 - h21 * g2) / det;
    double dB=-(-h21 * g1 + h11 * g2) / det;
    double gd=g1 * dA + g2 * dB;
    double stepsize=1;
    while (stepsize >= min_step) {
      double newA=alpha + stepsize * dA;
      double newB=beta + stepsize * dB;
      double newf=0.0;
      for (i=0; i < l; i++) {
        double fApB=scores[i] * newA + newB;
        if (fApB >= 0)         newf+=t[i] * fApB + log(1 + exp(-fApB));
 else         newf+=(t[i] - 1) * fApB + log(1 + exp(fApB));
      }
      if (newf < fval + 0.0001 * stepsize * gd) {
        alpha=newA;
        beta=newB;
        fval=newf;
        break;
      }
 else       stepsize=stepsize / 2.0;
    }
    if (stepsize < min_step) {
      logger.error("Line search fails.");
      break;
    }
  }
  if (iter >= maxIters) {
    logger.warn("Reaches maximal iterations");
  }
}
