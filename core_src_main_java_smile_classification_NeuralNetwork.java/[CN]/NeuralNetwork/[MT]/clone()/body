{
  NeuralNetwork copycat=new NeuralNetwork();
  copycat.errorFunction=errorFunction;
  copycat.activationFunction=activationFunction;
  copycat.p=p;
  copycat.k=k;
  copycat.eta=eta;
  copycat.alpha=alpha;
  copycat.lambda=lambda;
  copycat.target=target.clone();
  int numLayers=net.length;
  copycat.net=new Layer[numLayers];
  for (int i=0; i < numLayers; i++) {
    copycat.net[i]=new Layer();
    copycat.net[i].units=net[i].units;
    copycat.net[i].output=net[i].output.clone();
    copycat.net[i].error=net[i].error.clone();
    if (i > 0) {
      copycat.net[i].weight=Math.clone(net[i].weight);
      copycat.net[i].delta=Math.clone(net[i].delta);
    }
  }
  copycat.inputLayer=copycat.net[0];
  copycat.outputLayer=copycat.net[numLayers - 1];
  return copycat;
}
