{
  final double EPS=1.0E-8;
  double pp, t, u, err, x, al, h, w, afac;
  double a1=alpha - 1.;
  double b1=beta - 1.;
  if (p <= 0.0) {
    return 0.0;
  }
  if (p >= 1.0) {
    return 1.0;
  }
  if (alpha >= 1. && beta >= 1.) {
    pp=(p < 0.5) ? p : 1. - p;
    t=Math.sqrt(-2. * Math.log(pp));
    x=(2.30753 + t * 0.27061) / (1. + t * (0.99229 + t * 0.04481)) - t;
    if (p < 0.5) {
      x=-x;
    }
    al=(x * x - 3.) / 6.;
    h=2. / (1. / (2. * alpha - 1.) + 1. / (2. * beta - 1.));
    w=(x * Math.sqrt(al + h) / h) - (1. / (2. * beta - 1) - 1. / (2. * alpha - 1.)) * (al + 5. / 6. - 2. / (3. * h));
    x=alpha / (alpha + beta * Math.exp(2. * w));
  }
 else {
    double lna=Math.log(alpha / (alpha + beta));
    double lnb=Math.log(beta / (alpha + beta));
    t=Math.exp(alpha * lna) / alpha;
    u=Math.exp(beta * lnb) / beta;
    w=t + u;
    if (p < t / w) {
      x=Math.pow(alpha * w * p,1. / alpha);
    }
 else {
      x=1. - Math.pow(beta * w * (1. - p),1. / beta);
    }
  }
  afac=-Gamma.lgamma(alpha) - Gamma.lgamma(beta) + Gamma.lgamma(alpha + beta);
  for (int j=0; j < 10; j++) {
    if (x == 0. || x == 1.) {
      return x;
    }
    err=regularizedIncompleteBetaFunction(alpha,beta,x) - p;
    t=Math.exp(a1 * Math.log(x) + b1 * Math.log(1. - x) + afac);
    u=err / t;
    x-=(t=u / (1. - 0.5 * Math.min(1.,u * (a1 / x - b1 / (1. - x)))));
    if (x <= 0.) {
      x=0.5 * (x + t);
    }
    if (x >= 1.) {
      x=0.5 * (x + t + 1.);
    }
    if (Math.abs(t) < EPS * x && j > 0) {
      break;
    }
  }
  return x;
}
