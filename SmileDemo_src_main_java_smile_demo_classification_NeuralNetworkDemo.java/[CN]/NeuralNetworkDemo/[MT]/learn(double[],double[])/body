{
  try {
    units=Integer.parseInt(unitsField.getText().trim());
    if (units <= 0) {
      JOptionPane.showMessageDialog(this,"Invalid number of hidden neurons: " + units,"Error",JOptionPane.ERROR_MESSAGE);
      return null;
    }
  }
 catch (  Exception ex) {
    JOptionPane.showMessageDialog(this,"Invalid number of hidden neurons: " + unitsField.getText(),"Error",JOptionPane.ERROR_MESSAGE);
    return null;
  }
  try {
    epochs=Integer.parseInt(epochsField.getText().trim());
    if (units <= 0) {
      JOptionPane.showMessageDialog(this,"Invalid number of epochs: " + epochs,"Error",JOptionPane.ERROR_MESSAGE);
      return null;
    }
  }
 catch (  Exception ex) {
    JOptionPane.showMessageDialog(this,"Invalid number of epochs: " + epochsField.getText(),"Error",JOptionPane.ERROR_MESSAGE);
    return null;
  }
  double[][] data=dataset[datasetIndex].toArray(new double[dataset[datasetIndex].size()][]);
  int[] label=dataset[datasetIndex].toArray(new int[dataset[datasetIndex].size()]);
  int k=Math.max(label) + 1;
  NeuralNetwork net=null;
  if (k == 2) {
    net=new NeuralNetwork(NeuralNetwork.ErrorFunction.CROSS_ENTROPY,NeuralNetwork.ActivationFunction.LOGISTIC_SIGMOID,data[0].length,units,1);
  }
 else {
    net=new NeuralNetwork(NeuralNetwork.ErrorFunction.CROSS_ENTROPY,NeuralNetwork.ActivationFunction.SOFTMAX,data[0].length,units,k);
  }
  for (int i=0; i < epochs; i++) {
    net.learn(data,label);
  }
  for (int i=0; i < label.length; i++) {
    label[i]=net.predict(data[i]);
  }
  double trainError=error(label,label);
  System.out.format("training error = %.2f%%\n",100 * trainError);
  double[][] z=new double[y.length][x.length];
  for (int i=0; i < y.length; i++) {
    for (int j=0; j < x.length; j++) {
      double[] p={x[j],y[i]};
      z[i][j]=net.predict(p);
    }
  }
  return z;
}
