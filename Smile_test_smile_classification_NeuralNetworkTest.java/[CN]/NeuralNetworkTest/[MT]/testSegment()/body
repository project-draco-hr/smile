{
  System.out.println("Segment");
  ArffParser parser=new ArffParser();
  parser.setResponseIndex(19);
  try {
    AttributeDataset train=parser.parse(this.getClass().getResourceAsStream("/smile/data/weka/segment-challenge.arff"));
    AttributeDataset test=parser.parse(this.getClass().getResourceAsStream("/smile/data/weka/segment-test.arff"));
    double[][] x=train.toArray(new double[0][]);
    int[] y=train.toArray(new int[0]);
    double[][] testx=test.toArray(new double[0][]);
    int[] testy=test.toArray(new int[0]);
    int p=x[0].length;
    double[] mu=Math.colMin(x);
    double[] sd=Math.colMax(x);
    for (int i=0; i < x.length; i++) {
      for (int j=0; j < p; j++) {
        x[i][j]=(x[i][j] - mu[j]) / sd[j];
      }
    }
    for (int i=0; i < testx.length; i++) {
      for (int j=0; j < p; j++) {
        testx[i][j]=(testx[i][j] - mu[j]) / sd[j];
      }
    }
    NeuralNetwork net=new NeuralNetwork(NeuralNetwork.ErrorFunction.CROSS_ENTROPY,NeuralNetwork.ActivationFunction.SOFTMAX,x[0].length,30,Math.max(y) + 1);
    for (int j=0; j < 20; j++) {
      net.learn(x,y);
    }
    int error=0;
    for (int i=0; i < testx.length; i++) {
      if (net.predict(testx[i]) != testy[i]) {
        error++;
      }
    }
    System.out.format("Segment error rate = %.2f%%\n",100.0 * error / testx.length);
  }
 catch (  Exception ex) {
    System.err.println(ex);
  }
}
