{
  System.out.println("USPS nominal");
  DelimitedTextParser parser=new DelimitedTextParser();
  parser.setResponseIndex(new NominalAttribute("class"),0);
  try {
    AttributeDataset train=parser.parse("USPS Train",smile.data.parser.IOUtils.getTestDataFile("usps/zip.train"));
    AttributeDataset test=parser.parse("USPS Test",smile.data.parser.IOUtils.getTestDataFile("usps/zip.test"));
    double[][] x=train.toArray(new double[train.size()][]);
    int[] y=train.toArray(new int[train.size()]);
    double[][] testx=test.toArray(new double[test.size()][]);
    int[] testy=test.toArray(new int[test.size()]);
    for (    double[] xi : x) {
      for (int i=0; i < xi.length; i++) {
        xi[i]=Math.round(255 * (xi[i] + 1) / 2);
      }
    }
    for (    double[] xi : testx) {
      for (int i=0; i < xi.length; i++) {
        xi[i]=Math.round(127 + 127 * xi[i]);
      }
    }
    Attribute[] attributes=new Attribute[256];
    String[] values=new String[attributes.length];
    for (int i=0; i < attributes.length; i++) {
      values[i]=String.valueOf(i);
    }
    for (int i=0; i < attributes.length; i++) {
      attributes[i]=new NominalAttribute("V" + i,values);
    }
    DecisionTree tree=new DecisionTree(attributes,x,y,350,2,DecisionTree.SplitRule.ENTROPY);
    int error=0;
    for (int i=0; i < testx.length; i++) {
      if (tree.predict(testx[i]) != testy[i]) {
        error++;
      }
    }
    System.out.format("USPS error rate = %.2f%%\n",100.0 * error / testx.length);
    double[] importance=tree.importance();
    int[] index=QuickSort.sort(importance);
    for (int i=importance.length; i-- > 0; ) {
      System.out.format("%s importance is %.4f\n",train.attributes()[index[i]],importance[i]);
    }
    assertEquals(324,error);
  }
 catch (  Exception ex) {
    System.err.println(ex);
  }
}
