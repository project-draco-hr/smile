{
  int n=data.length;
  KNNSearch<double[],double[]> knn=null;
  if (data[0].length < 10) {
    knn=new KDTree<double[]>(data,data);
  }
 else {
    knn=new CoverTree<double[]>(data,new EuclideanDistance());
  }
  graph=new AdjacencyList(n);
  double[] M=new double[n];
  for (int i=0; i < n; i++) {
    Neighbor<double[],double[]>[] neighbors=knn.knn(data[i],k);
    for (int j=0; j < neighbors.length; j++) {
      graph.setWeight(i,neighbors[j].index,neighbors[j].distance);
      M[i]+=neighbors[j].distance;
    }
    M[i]=Math.sqrt(M[i] / neighbors.length);
  }
  if (CIsomap) {
    for (    Edge edge : graph.getEdges()) {
      edge.weight/=(M[edge.v1] * M[edge.v2]);
    }
  }
  int[][] cc=graph.dfs();
  if (cc.length == 1) {
    index=new int[n];
    for (int i=0; i < n; i++) {
      index[i]=i;
    }
  }
 else {
    n=0;
    int component=0;
    for (int i=0; i < cc.length; i++) {
      if (cc[i].length > n) {
        component=i;
        n=cc[i].length;
      }
    }
    System.out.format("IsoMap: %d connected components, largest one has %d samples.\n",cc.length,n);
    index=cc[component];
    graph=graph.subgraph(index);
  }
  double[][] D=graph.dijkstra();
  for (int i=0; i < n; i++) {
    for (int j=0; j < i; j++) {
      D[i][j]=-0.5 * D[i][j] * D[i][j];
      D[j][i]=D[i][j];
    }
  }
  double[] mean=Math.rowMean(D);
  double mu=Math.mean(mean);
  double[][] B=new double[n][n];
  for (int i=0; i < n; i++) {
    for (int j=0; j <= i; j++) {
      B[i][j]=D[i][j] - mean[i] - mean[j] + mu;
      B[j][i]=B[i][j];
    }
  }
  EigenValueDecomposition eigen=Math.eigen(B,d);
  coordinates=new double[n][d];
  for (int j=0; j < d; j++) {
    if (eigen.getEigenValues()[j] < 0) {
      throw new IllegalArgumentException(String.format("Some of the first %d eigenvalues are < 0.",d));
    }
    double scale=Math.sqrt(eigen.getEigenValues()[j]);
    for (int i=0; i < n; i++) {
      coordinates[i][j]=eigen.getEigenVectors()[i][j] * scale;
    }
  }
}
