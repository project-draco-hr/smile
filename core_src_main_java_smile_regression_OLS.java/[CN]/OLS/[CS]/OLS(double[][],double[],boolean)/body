{
  if (x.length != y.length) {
    throw new IllegalArgumentException(String.format("The sizes of X and Y don't match: %d != %d",x.length,y.length));
  }
  int n=x.length;
  p=x[0].length;
  if (n <= p) {
    throw new IllegalArgumentException(String.format("The input matrix is not over determined: %d rows, %d columns",n,p));
  }
  double[] w1=new double[p + 1];
  double[][] X=new double[n][p + 1];
  for (int i=0; i < n; i++) {
    System.arraycopy(x[i],0,X[i],0,p);
    X[i][p]=1.0;
  }
  QRDecomposition qr=null;
  SingularValueDecomposition svd=null;
  if (SVD) {
    svd=SingularValueDecomposition.decompose(X);
    svd.solve(y,w1);
  }
 else {
    try {
      qr=new QRDecomposition(X);
      qr.solve(y,w1);
    }
 catch (    RuntimeException e) {
      logger.warn("Matrix is not of full rank, try SVD instead");
      SVD=true;
      Arrays.fill(w1,0.0);
      for (int i=0; i < n; i++) {
        System.arraycopy(x[i],0,X[i],0,p);
        X[i][p]=1.0;
      }
      svd=SingularValueDecomposition.decompose(X);
      svd.solve(y,w1);
    }
  }
  b=w1[p];
  w=new double[p];
  System.arraycopy(w1,0,w,0,p);
  double[] yhat=new double[n];
  Math.ax(x,w,yhat);
  double TSS=0.0;
  RSS=0.0;
  double ybar=Math.mean(y);
  residuals=new double[n];
  for (int i=0; i < n; i++) {
    double r=y[i] - yhat[i] - b;
    residuals[i]=r;
    RSS+=Math.sqr(r);
    TSS+=Math.sqr(y[i] - ybar);
  }
  error=Math.sqrt(RSS / (n - p - 1));
  df=n - p - 1;
  RSquared=1.0 - RSS / TSS;
  adjustedRSquared=1.0 - ((1 - RSquared) * (n - 1) / (n - p - 1));
  F=(TSS - RSS) * (n - p - 1) / (RSS * p);
  int df1=p;
  int df2=n - p - 1;
  pvalue=Beta.regularizedIncompleteBetaFunction(0.5 * df2,0.5 * df1,df2 / (df2 + df1 * F));
  coefficients=new double[p + 1][4];
  if (SVD) {
    for (int i=0; i <= p; i++) {
      coefficients[i][0]=w1[i];
      double s=svd.getSingularValues()[i];
      if (!Math.isZero(s,1E-10)) {
        double se=error / svd.getSingularValues()[i];
        coefficients[i][1]=se;
        double t=w1[i] / se;
        coefficients[i][2]=t;
        coefficients[i][3]=Beta.regularizedIncompleteBetaFunction(0.5 * df,0.5,df / (df + t * t));
      }
 else {
        coefficients[i][1]=Double.NaN;
        coefficients[i][2]=0.0;
        coefficients[i][3]=1.0;
      }
    }
  }
 else {
    CholeskyDecomposition cholesky=qr.toCholesky();
    double[][] inv=cholesky.inverse();
    for (int i=0; i <= p; i++) {
      coefficients[i][0]=w1[i];
      double se=error * Math.sqrt(inv[i][i]);
      coefficients[i][1]=se;
      double t=w1[i] / se;
      coefficients[i][2]=t;
      coefficients[i][3]=Beta.regularizedIncompleteBetaFunction(0.5 * df,0.5,df / (df + t * t));
    }
  }
}
