{
  numRun++;
  int wi=500;
  int hi=500;
  int r1=wi / 4;
  int l1=hi / 4;
  int r2=wi / 2;
  int l2=hi / 2;
  int cx=(wi / 2);
  int cy=(hi / 2);
  int xA[]=new int[MAX_COMPLEX];
  int yA[]=new int[MAX_COMPLEX];
  int ringRadius;
  int w;
  int h;
  int z;
  double remainderX=0.0;
  double remainderY=0.0;
  float rdist;
switch (distrib) {
case 0:
    r1=wi / 4;
  l1=hi / 4;
r2=wi / 2;
l2=hi / 2;
SignalX=(int)(r1 + (r2 * Math.random()));
SignalY=(int)(l1 + (l2 * Math.random()));
break;
case 1:
l2=((cx < cy) ? cx : cy);
r1=wi / 2 - l2 / 2;
l1=hi / 2 - l2 / 2;
do {
SignalX=(int)(r1 + (l2 * Math.random()));
SignalY=(int)(l1 + (l2 * Math.random()));
rdist=(float)Math.sqrt(((cx - SignalX) * (cx - SignalX) + (cy - SignalY) * (cy - SignalY)));
}
 while (rdist > l2 / 2);
break;
case 2:
l2=((cx < cy) ? cx : cy);
r1=cx - l2;
l1=cy - l2;
ringRadius=(int)(l2 * RING_FACTOR);
do {
SignalX=(int)(r1 + (2 * l2 * Math.random()));
SignalY=(int)(l1 + (2 * l2 * Math.random()));
rdist=(float)Math.sqrt(((cx - SignalX) * (cx - SignalX) + (cy - SignalY) * (cy - SignalY)));
}
 while ((rdist > l2) || (rdist < (l2 - ringRadius)));
break;
case 3:
w=wi / 9;
h=hi / 5;
xA[0]=w;
yA[0]=h;
xA[1]=w;
yA[1]=2 * h;
xA[2]=w;
yA[2]=3 * h;
xA[3]=2 * w;
yA[3]=3 * h;
xA[4]=3 * w;
yA[4]=3 * h;
xA[5]=3 * w;
yA[5]=2 * h;
xA[6]=3 * w;
yA[6]=h;
xA[7]=4 * w;
yA[7]=h;
xA[8]=5 * w;
yA[8]=h;
xA[9]=5 * w;
yA[9]=2 * h;
xA[10]=5 * w;
yA[10]=3 * h;
xA[11]=7 * w;
yA[11]=h;
xA[12]=7 * w;
yA[12]=2 * h;
xA[13]=7 * w;
yA[13]=3 * h;
z=(int)(14 * Math.random());
SignalX=(int)(xA[z] + (w * Math.random()));
SignalY=(int)(yA[z] + (h * Math.random()));
break;
case 4:
w=wi / 9;
h=hi / 7;
xA[0]=w;
yA[0]=5 * h;
xA[1]=w;
yA[1]=4 * h;
xA[2]=w;
yA[2]=3 * h;
xA[3]=w;
yA[3]=2 * h;
xA[4]=1 * w;
yA[4]=h;
xA[5]=2 * w;
yA[5]=h;
xA[6]=3 * w;
yA[6]=h;
xA[7]=4 * w;
yA[7]=h;
xA[8]=5 * w;
yA[8]=1 * h;
xA[9]=5 * w;
yA[9]=2 * h;
xA[10]=5 * w;
yA[10]=3 * h;
xA[11]=3 * w;
yA[11]=3 * h;
xA[12]=3 * w;
yA[12]=4 * h;
xA[13]=3 * w;
yA[13]=5 * h;
xA[14]=4 * w;
yA[14]=5 * h;
xA[15]=5 * w;
yA[15]=5 * h;
xA[16]=6 * w;
yA[16]=5 * h;
xA[17]=7 * w;
yA[17]=5 * h;
xA[18]=7 * w;
yA[18]=4 * h;
xA[19]=7 * w;
yA[19]=3 * h;
xA[20]=7 * w;
yA[20]=2 * h;
xA[21]=7 * w;
yA[21]=1 * h;
z=(int)(22 * Math.random());
SignalX=(int)(xA[z] + (w * Math.random()));
SignalY=(int)(yA[z] + (h * Math.random()));
break;
case 5:
w=wi / 13;
h=hi / 11;
xA[0]=w;
yA[0]=h;
xA[1]=w;
yA[1]=2 * h;
xA[2]=w;
yA[2]=3 * h;
xA[3]=w;
yA[3]=4 * h;
xA[4]=1 * w;
yA[4]=5 * h;
xA[5]=1 * w;
yA[5]=6 * h;
xA[6]=1 * w;
yA[6]=7 * h;
xA[7]=1 * w;
yA[7]=8 * h;
xA[8]=1 * w;
yA[8]=9 * h;
xA[9]=2 * w;
yA[9]=1 * h;
xA[10]=3 * w;
yA[10]=1 * h;
xA[11]=4 * w;
yA[11]=1 * h;
xA[12]=5 * w;
yA[12]=1 * h;
xA[13]=6 * w;
yA[13]=1 * h;
xA[14]=7 * w;
yA[14]=1 * h;
xA[15]=8 * w;
yA[15]=1 * h;
xA[16]=9 * w;
yA[16]=1 * h;
xA[17]=9 * w;
yA[17]=2 * h;
xA[18]=9 * w;
yA[18]=3 * h;
xA[19]=9 * w;
yA[19]=4 * h;
xA[20]=9 * w;
yA[20]=5 * h;
xA[21]=9 * w;
yA[21]=6 * h;
xA[22]=9 * w;
yA[22]=7 * h;
xA[23]=8 * w;
yA[23]=7 * h;
xA[24]=7 * w;
yA[24]=7 * h;
xA[25]=6 * w;
yA[25]=7 * h;
xA[26]=5 * w;
yA[26]=7 * h;
xA[27]=5 * w;
yA[27]=6 * h;
xA[28]=5 * w;
yA[28]=5 * h;
xA[29]=3 * w;
yA[29]=3 * h;
xA[30]=3 * w;
yA[30]=4 * h;
xA[31]=3 * w;
yA[31]=5 * h;
xA[32]=3 * w;
yA[32]=6 * h;
xA[33]=3 * w;
yA[33]=7 * h;
xA[34]=3 * w;
yA[34]=8 * h;
xA[35]=3 * w;
yA[35]=9 * h;
xA[36]=4 * w;
yA[36]=3 * h;
xA[37]=5 * w;
yA[37]=3 * h;
xA[38]=6 * w;
yA[38]=3 * h;
xA[39]=7 * w;
yA[39]=3 * h;
xA[40]=7 * w;
yA[40]=4 * h;
xA[41]=7 * w;
yA[41]=5 * h;
xA[42]=4 * w;
yA[42]=9 * h;
xA[43]=5 * w;
yA[43]=9 * h;
xA[44]=6 * w;
yA[44]=9 * h;
xA[45]=7 * w;
yA[45]=9 * h;
xA[46]=8 * w;
yA[46]=9 * h;
xA[47]=9 * w;
yA[47]=9 * h;
xA[48]=10 * w;
yA[48]=9 * h;
xA[49]=11 * w;
yA[49]=9 * h;
xA[50]=11 * w;
yA[50]=8 * h;
xA[51]=11 * w;
yA[51]=7 * h;
xA[52]=11 * w;
yA[52]=6 * h;
xA[53]=11 * w;
yA[53]=5 * h;
xA[54]=11 * w;
yA[54]=4 * h;
xA[55]=11 * w;
yA[55]=3 * h;
xA[56]=11 * w;
yA[56]=2 * h;
xA[57]=11 * w;
yA[57]=1 * h;
z=(int)(58 * Math.random());
SignalX=(int)(xA[z] + (w * Math.random()));
SignalY=(int)(yA[z] + (h * Math.random()));
break;
case 6:
w=wi / 10;
h=hi / 10;
xA[0]=2 * w;
yA[0]=4 * h;
xA[1]=5 * w;
yA[1]=1 * h;
z=(int)(2 * Math.random());
if (z == 0) {
SignalX=(int)(xA[z] + (w * Math.random()));
SignalY=(int)(yA[z] + (h * Math.random()));
}
 else {
SignalX=(int)(xA[z] + (4 * w * Math.random()));
SignalY=(int)(yA[z] + (8 * h * Math.random()));
}
break;
case 7:
z=(int)(MAX_DISCRETE_SIGNALS * Math.random());
SignalX=discreteSignalsX[z];
SignalY=discreteSignalsY[z];
break;
case 8:
w=wi / 17;
h=hi / 8;
xA[0]=w;
yA[0]=2 * h;
xA[1]=w;
yA[1]=3 * h;
xA[2]=w;
yA[2]=4 * h;
xA[3]=w;
yA[3]=5 * h;
xA[4]=2 * w;
yA[4]=5 * h;
xA[5]=3 * w;
yA[5]=5 * h;
xA[6]=3 * w;
yA[6]=4 * h;
xA[7]=3 * w;
yA[7]=3 * h;
xA[8]=3 * w;
yA[8]=2 * h;
xA[9]=4 * w;
yA[9]=2 * h;
xA[10]=5 * w;
yA[10]=2 * h;
xA[11]=6 * w;
yA[11]=2 * h;
xA[12]=7 * w;
yA[12]=2 * h;
xA[13]=7 * w;
yA[13]=3 * h;
xA[14]=7 * w;
yA[14]=4 * h;
xA[15]=7 * w;
yA[15]=5 * h;
xA[16]=8 * w;
yA[16]=5 * h;
xA[17]=9 * w;
yA[17]=5 * h;
xA[18]=10 * w;
yA[18]=5 * h;
xA[19]=11 * w;
yA[19]=5 * h;
xA[20]=11 * w;
yA[20]=4 * h;
xA[21]=11 * w;
yA[21]=3 * h;
xA[22]=11 * w;
yA[22]=2 * h;
xA[23]=14 * w;
yA[23]=2 * h;
xA[24]=15 * w;
yA[24]=2 * h;
xA[25]=15 * w;
yA[25]=3 * h;
xA[26]=15 * w;
yA[26]=4 * h;
xA[27]=15 * w;
yA[27]=5 * h;
z=(int)(28 * Math.random());
SignalX=(int)(xA[z] + (w * Math.random()));
SignalY=(int)(yA[z] + (h * Math.random()));
break;
case 9:
r2=wi / 4;
l2=hi / 4;
r1=(int)(0.75 * (wi / 2 + Math.IEEEremainder(0.2 * numRun,wi)));
l1=(int)(0.75 * (hi / 2 + Math.IEEEremainder(0.2 * numRun,hi)));
SignalX=(int)(r1 + (r2 * Math.random()));
SignalY=(int)(l1 + (l2 * Math.random()));
break;
case 10:
r2=wi / 4;
l2=hi / 4;
remainderX=Math.IEEEremainder(0.2 * numRun,wi);
remainderY=Math.IEEEremainder(0.2 * numRun,hi);
if ((bounceX_old > 0) && (remainderX < 0)) {
bounceX=bounceX * (-1);
}
if ((bounceY_old > 0) && (remainderY < 0)) {
bounceY=bounceY * (-1);
}
r1=(int)(0.75 * (wi / 2 + bounceX * remainderX));
l1=(int)(0.75 * (hi / 2 + bounceY * remainderY));
bounceX_old=remainderX;
bounceY_old=remainderY;
SignalX=(int)(r1 + (r2 * Math.random()));
SignalY=(int)(l1 + (l2 * Math.random()));
break;
case 11:
r2=wi / 4;
l2=hi / 4;
if (Math.ceil(Math.IEEEremainder((double)numRun,1000.0)) == 0) {
jumpX=(int)((wi - r2) * Math.random());
jumpY=(int)((hi - l2) * Math.random());
}
SignalX=(int)(jumpX + (r2 * Math.random()));
SignalY=(int)(jumpY + (l2 * Math.random()));
break;
case 12:
r2=wi / 4;
l2=hi / 4;
SignalX=(int)(jumpX + (r2 * Math.random()));
SignalY=(int)(jumpY + (l2 * Math.random()));
break;
}
}
