{
  System.out.println("Iris binary");
  ArffParser arffParser=new ArffParser();
  arffParser.setResponseIndex(4);
  try {
    AttributeDataset iris=arffParser.parse(smile.data.parser.IOUtils.getTestDataFile("weka/iris.arff"));
    double[][] x=iris.toArray(new double[iris.size()][]);
    int[] y=iris.toArray(new int[iris.size()]);
    for (int i=0; i < y.length; i++) {
      if (y[i] == 2) {
        y[i]=1;
      }
 else {
        y[i]=0;
      }
    }
    int n=x.length;
    int p=x[0].length;
    double[] mu=Math.colMean(x);
    double[] sd=Math.colSd(x);
    for (int i=0; i < n; i++) {
      for (int j=0; j < p; j++) {
        x[i][j]=(x[i][j] - mu[j]) / sd[j];
      }
    }
    LOOCV loocv=new LOOCV(n);
    int error=0;
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      NeuralNetwork net=new NeuralNetwork(NeuralNetwork.ErrorFunction.CROSS_ENTROPY,NeuralNetwork.ActivationFunction.LOGISTIC_SIGMOID,x[0].length,10,1);
      for (int j=0; j < 30; j++) {
        net.learn(trainx,trainy);
      }
      if (y[loocv.test[i]] != net.predict(x[loocv.test[i]]))       error++;
    }
    System.out.println("Neural network error = " + error);
    assertTrue(error <= 8);
  }
 catch (  Exception ex) {
    System.err.println(ex);
  }
}
