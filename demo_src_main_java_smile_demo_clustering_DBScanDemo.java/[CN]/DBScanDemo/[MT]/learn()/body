{
  try {
    minPts=Integer.parseInt(minPtsField.getText().trim());
    if (minPts < 1) {
      JOptionPane.showMessageDialog(this,"Invalid MinPts: " + minPts,"Error",JOptionPane.ERROR_MESSAGE);
      return null;
    }
  }
 catch (  Exception e) {
    JOptionPane.showMessageDialog(this,"Invalid MinPts: " + minPtsField.getText(),"Error",JOptionPane.ERROR_MESSAGE);
    return null;
  }
  try {
    range=Double.parseDouble(rangeField.getText().trim());
    if (range <= 0) {
      JOptionPane.showMessageDialog(this,"Invalid Range: " + range,"Error",JOptionPane.ERROR_MESSAGE);
      return null;
    }
  }
 catch (  Exception e) {
    JOptionPane.showMessageDialog(this,"Invalid range: " + rangeField.getText(),"Error",JOptionPane.ERROR_MESSAGE);
    return null;
  }
  long clock=System.currentTimeMillis();
  DBScan<double[]> dbscan=new DBScan<>(dataset[datasetIndex],new EuclideanDistance(),minPts,range);
  System.out.format("DBSCAN clusterings %d samples in %dms\n",dataset[datasetIndex].length,System.currentTimeMillis() - clock);
  JPanel pane=new JPanel(new GridLayout(1,2));
  PlotCanvas plot=ScatterPlot.plot(dataset[datasetIndex],pointLegend);
  for (int k=0; k < dbscan.getNumClusters(); k++) {
    double[][] cluster=new double[dbscan.getClusterSize()[k]][];
    for (int i=0, j=0; i < dataset[datasetIndex].length; i++) {
      if (dbscan.getClusterLabel()[i] == k) {
        cluster[j++]=dataset[datasetIndex][i];
      }
    }
    plot.points(cluster,pointLegend,Palette.COLORS[k % Palette.COLORS.length]);
  }
  pane.add(plot);
  return pane;
}
