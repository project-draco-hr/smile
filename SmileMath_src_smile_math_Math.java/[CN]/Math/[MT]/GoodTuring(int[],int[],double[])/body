{
  final double CONFID_FACTOR=1.96;
  if (r.length != Nr.length) {
    throw new IllegalArgumentException("The sizes of r and Nr are not same.");
  }
  int len=r.length;
  double[] logR=new double[len];
  double[] logZ=new double[len];
  double[] Z=new double[len];
  int N=0;
  for (int j=0; j < len; ++j) {
    N+=r[j] * Nr[j];
  }
  int n1=(r[0] != 1) ? 0 : Nr[0];
  double p0=n1 / (double)N;
  for (int j=0; j < len; ++j) {
    int q=j == 0 ? 0 : r[j - 1];
    int t=j == len - 1 ? 2 * r[j] - q : r[j + 1];
    Z[j]=2.0 * Nr[j] / (t - q);
    logR[j]=Math.log(r[j]);
    logZ[j]=Math.log(Z[j]);
  }
  double XYs=0.0, Xsquares=0.0, meanX=0.0, meanY=0.0;
  for (int i=0; i < len; ++i) {
    meanX+=logR[i];
    meanY+=logZ[i];
  }
  meanX/=len;
  meanY/=len;
  for (int i=0; i < len; ++i) {
    XYs+=(logR[i] - meanX) * (logZ[i] - meanY);
    Xsquares+=Math.sqr(logR[i] - meanX);
  }
  double slope=XYs / Xsquares;
  double intercept=meanY - slope * meanX;
  boolean indiffValsSeen=false;
  for (int j=0; j < len; ++j) {
    double y=(r[j] + 1) * smoothed(r[j] + 1,slope,intercept) / smoothed(r[j],slope,intercept);
    if (row(r,r[j] + 1) < 0) {
      indiffValsSeen=true;
    }
    if (!indiffValsSeen) {
      int n=Nr[row(r,r[j] + 1)];
      double x=(r[j] + 1) * n / (double)Nr[j];
      if (Math.abs(x - y) <= CONFID_FACTOR * Math.sqrt(Math.sqr(r[j] + 1.0) * n / Math.sqr(Nr[j]) * (1 + n / (double)Nr[j]))) {
        indiffValsSeen=true;
      }
 else {
        p[j]=x;
      }
    }
    if (indiffValsSeen) {
      p[j]=y;
    }
  }
  double Nprime=0.0;
  for (int j=0; j < len; ++j) {
    Nprime+=Nr[j] * p[j];
  }
  for (int j=0; j < len; ++j) {
    p[j]=(1 - p0) * p[j] / Nprime;
  }
  return p0;
}
