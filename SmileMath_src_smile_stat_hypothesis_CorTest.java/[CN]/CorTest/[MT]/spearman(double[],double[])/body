{
  if (x.length != y.length) {
    throw new IllegalArgumentException("Input vectors have different size");
  }
  int n=x.length;
  double[] wksp1=new double[n];
  double[] wksp2=new double[n];
  for (int j=0; j < n; j++) {
    wksp1[j]=x[j];
    wksp2[j]=y[j];
  }
  QuickSort.sort(wksp1,wksp2);
  double sf=crank(wksp1);
  QuickSort.sort(wksp2,wksp1);
  double sg=crank(wksp2);
  double d=0.0;
  for (int j=0; j < n; j++) {
    d+=Math.sqr(wksp1[j] - wksp2[j]);
  }
  int en=n;
  double en3n=en * en * en - en;
  double fac=(1.0 - sf / en3n) * (1.0 - sg / en3n);
  double rs=(1.0 - (6.0 / en3n) * (d + (sf + sg) / 12.0)) / Math.sqrt(fac);
  fac=(rs + 1.0) * (1.0 - rs);
  double probrs=0.0;
  double t=rs * Math.sqrt((en - 2.0) / fac);
  int df=en - 2;
  if (fac > 0.0) {
    probrs=Beta.regularizedIncompleteBetaFunction(0.5 * df,0.5,df / (df + t * t));
  }
  return new CorTest(rs,df,t,probrs);
}
