{
  if (k < 1) {
    throw new IllegalArgumentException("Invalid k: " + k);
  }
  long fpq=simhash64(q);
  Set<Integer> candidates=obtainCandidates(q);
  @SuppressWarnings("unchecked") Neighbor<String,E>[] neighbors=(Neighbor<String,E>[])Array.newInstance(Neighbor.class,k);
  MaxHeap<Neighbor<String,E>> heap=new MaxHeap<Neighbor<String,E>>(neighbors);
  for (  int index : candidates) {
    long sign=signs.get(index);
    double distance=HammingDistance.d(fpq,sign);
    if (!keys.get(index).equals(q)) {
      heap.add(new Neighbor<String,E>(keys.get(index),data.get(index),index,distance));
    }
  }
  return heap.toSortedArray();
}
