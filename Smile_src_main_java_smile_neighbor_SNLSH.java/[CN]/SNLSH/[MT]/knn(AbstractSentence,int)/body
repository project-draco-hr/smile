{
  if (k < 1) {
    throw new IllegalArgumentException("Invalid k: " + k);
  }
  long fpq=simhash64(q.tokens);
  Set<Integer> candidates=obtainCandidates(q.tokens);
  Neighbor<AbstractSentence,E>[] neighbors=(Neighbor<AbstractSentence,E>[])Array.newInstance(Neighbor.class,k);
  HeapSelect<Neighbor<AbstractSentence,E>> heap=new HeapSelect<Neighbor<AbstractSentence,E>>(neighbors);
  Neighbor<AbstractSentence,E> neighbor=new Neighbor<AbstractSentence,E>(null,null,0,Double.MAX_VALUE);
  for (int i=0; i < k; i++) {
    heap.add(neighbor);
  }
  int hit=0;
  for (  int index : candidates) {
    AbstractSentence key=keys.get(index);
    if (q.line.equals(key.line) && identicalExcluded) {
      continue;
    }
    long sign=signs.get(index);
    double distance=HammingDistance.d(fpq,sign);
    if (distance < heap.peek().distance) {
      heap.add(new Neighbor<AbstractSentence,E>(keys.get(index),data.get(index),index,distance));
      hit++;
    }
  }
  heap.sort();
  if (hit < k) {
    @SuppressWarnings("unchecked") Neighbor<AbstractSentence,E>[] n2=(Neighbor<AbstractSentence,E>[])Array.newInstance(Neighbor.class,hit);
    int start=k - hit;
    for (int i=0; i < hit; i++) {
      n2[i]=neighbors[i + start];
    }
    neighbors=n2;
  }
  return neighbors;
}
