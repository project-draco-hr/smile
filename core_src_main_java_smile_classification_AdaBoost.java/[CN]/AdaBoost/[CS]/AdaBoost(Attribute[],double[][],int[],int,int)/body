{
  if (x.length != y.length) {
    throw new IllegalArgumentException(String.format("The sizes of X and Y don't match: %d != %d",x.length,y.length));
  }
  if (maxNodes < 1) {
    throw new IllegalArgumentException("Invalid number of trees: " + maxNodes);
  }
  if (maxNodes < 2) {
    throw new IllegalArgumentException("Invalid maximum leaves: " + maxNodes);
  }
  int[] labels=Math.unique(y);
  Arrays.sort(labels);
  for (int i=0; i < labels.length; i++) {
    if (labels[i] < 0) {
      throw new IllegalArgumentException("Negative class label: " + labels[i]);
    }
    if (i > 0 && labels[i] - labels[i - 1] > 1) {
      throw new IllegalArgumentException("Missing class: " + labels[i] + 1);
    }
  }
  k=labels.length;
  if (k < 2) {
    throw new IllegalArgumentException("Only one class.");
  }
  if (attributes == null) {
    int p=x[0].length;
    attributes=new Attribute[p];
    for (int i=0; i < p; i++) {
      attributes[i]=new NumericAttribute("V" + (i + 1));
    }
  }
  int[][] order=SmileUtils.sort(attributes,x);
  int n=x.length;
  int[] samples=new int[n];
  double[] w=new double[n];
  boolean[] err=new boolean[n];
  for (int i=0; i < n; i++) {
    w[i]=1.0;
  }
  double guess=1.0 / k;
  double b=Math.log(k - 1);
  int failures=0;
  trees=new DecisionTree[ntrees];
  alpha=new double[ntrees];
  error=new double[ntrees];
  for (int t=0; t < ntrees; t++) {
    double W=Math.sum(w);
    for (int i=0; i < n; i++) {
      w[i]/=W;
    }
    Arrays.fill(samples,0);
    int[] rand=Math.random(w,n);
    for (    int s : rand) {
      samples[s]++;
    }
    trees[t]=new DecisionTree(attributes,x,y,maxNodes,1,x[0].length,DecisionTree.SplitRule.GINI,samples,order);
    for (int i=0; i < n; i++) {
      err[i]=trees[t].predict(x[i]) != y[i];
    }
    double e=0.0;
    for (int i=0; i < n; i++) {
      if (err[i]) {
        e+=w[i];
      }
    }
    if (1 - e <= guess) {
      System.err.format("Skip the weak classifier %d makes %.2f%% weighted error\n",t,100 * e);
      if (++failures > 3) {
        trees=Arrays.copyOf(trees,t);
        alpha=Arrays.copyOf(alpha,t);
        error=Arrays.copyOf(error,t);
        break;
      }
 else {
        t--;
        continue;
      }
    }
 else     failures=0;
    error[t]=e;
    alpha[t]=Math.log((1 - e) / Math.max(1E-10,e)) + b;
    double a=Math.exp(alpha[t]);
    for (int i=0; i < n; i++) {
      if (err[i]) {
        w[i]*=a;
      }
    }
  }
  importance=new double[attributes.length];
  for (  DecisionTree tree : trees) {
    double[] imp=tree.importance();
    for (int i=0; i < imp.length; i++) {
      importance[i]+=imp[i];
    }
  }
}
