{
  if (x.length != y.length) {
    throw new IllegalArgumentException(String.format("The sizes of X and Y don't match: %d != %d",x.length,y.length));
  }
  if (ntrees < 1) {
    throw new IllegalArgumentException("Invalid number of trees: " + ntrees);
  }
  if (maxNodes < 2) {
    throw new IllegalArgumentException("Invalid maximum leaves: " + maxNodes);
  }
  if (shrinkage <= 0 || shrinkage > 1) {
    throw new IllegalArgumentException("Invalid shrinkage: " + shrinkage);
  }
  if (subsample <= 0 || subsample > 1) {
    throw new IllegalArgumentException("Invalid sampling fraction: " + subsample);
  }
  if (attributes == null) {
    int p=x[0].length;
    attributes=new Attribute[p];
    for (int i=0; i < p; i++) {
      attributes[i]=new NumericAttribute("V" + (i + 1));
    }
  }
  this.ntrees=ntrees;
  this.maxNodes=maxNodes;
  this.shrinkage=shrinkage;
  this.subsample=subsample;
  this.k=Math.max(y) + 1;
  if (k < 2) {
    throw new IllegalArgumentException("Only one class or negative class labels.");
  }
  importance=new double[attributes.length];
  if (k == 2) {
    train2(attributes,x,y);
    for (    RegressionTree tree : trees) {
      double[] imp=tree.importance();
      for (int i=0; i < imp.length; i++) {
        importance[i]+=imp[i];
      }
    }
  }
 else {
    traink(attributes,x,y);
    for (    RegressionTree[] grove : forest) {
      for (      RegressionTree tree : grove) {
        double[] imp=tree.importance();
        for (int i=0; i < imp.length; i++) {
          importance[i]+=imp[i];
        }
      }
    }
  }
}
