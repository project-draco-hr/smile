{
  int n=x.length;
  int N=(int)Math.round(n * f);
  double[][] h=new double[k][n];
  double[][] p=new double[k][n];
  double[][] response=new double[k][n];
  int[][] order=SmileUtils.sort(attributes,x);
  forest=new RegressionTree[k][ntrees];
  RegressionTree.NodeOutput[] output=new LKNodeOutput[k];
  for (int i=0; i < k; i++) {
    output[i]=new LKNodeOutput(response[i]);
  }
  int[] perm=new int[n];
  int[] samples=new int[n];
  for (int i=0; i < n; i++) {
    perm[i]=i;
  }
  for (int m=0; m < ntrees; m++) {
    for (int i=0; i < n; i++) {
      double max=Double.NEGATIVE_INFINITY;
      for (int j=0; j < k; j++) {
        if (max < h[j][i]) {
          max=h[j][i];
        }
      }
      double Z=0.0;
      for (int j=0; j < k; j++) {
        p[j][i]=Math.exp(h[j][i] - max);
        Z+=p[j][i];
      }
      for (int j=0; j < k; j++) {
        p[j][i]/=Z;
      }
    }
    for (int j=0; j < k; j++) {
      for (int i=0; i < n; i++) {
        if (y[i] == j) {
          response[j][i]=1.0;
        }
 else {
          response[j][i]=0.0;
        }
        response[j][i]-=p[j][i];
      }
      Arrays.fill(samples,0);
      Math.permutate(perm);
      for (int i=0; i < N; i++) {
        samples[perm[i]]=1;
      }
      forest[j][m]=new RegressionTree(attributes,x,response[j],maxNodes,5,x[0].length,order,samples,output[j]);
      for (int i=0; i < n; i++) {
        h[j][i]+=shrinkage * forest[j][m].predict(x[i]);
      }
    }
  }
}
