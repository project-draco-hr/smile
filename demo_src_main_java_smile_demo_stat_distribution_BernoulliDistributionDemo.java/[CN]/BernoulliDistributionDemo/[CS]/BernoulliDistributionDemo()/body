{
  super(new BorderLayout());
  Hashtable<Integer,JLabel> labelTable=new Hashtable<>();
  for (int i=1; i < 10; i+=2) {
    labelTable.put(new Integer(i),new JLabel(String.valueOf(i / 10.0)));
  }
  probSlider=new JSlider(1,9,(int)Math.round(prob * 10));
  probSlider.addChangeListener(this);
  probSlider.setLabelTable(labelTable);
  probSlider.setMajorTickSpacing(5);
  probSlider.setMinorTickSpacing(1);
  probSlider.setPaintTicks(true);
  probSlider.setPaintLabels(true);
  optionPane=new JPanel(new FlowLayout(FlowLayout.LEFT));
  optionPane.setBorder(BorderFactory.createRaisedBevelBorder());
  optionPane.add(new JLabel("Probability:"));
  optionPane.add(probSlider);
  add(optionPane,BorderLayout.NORTH);
  canvas=new JPanel(new GridLayout(1,3));
  add(canvas,BorderLayout.CENTER);
  BernoulliDistribution dist=new BernoulliDistribution(prob);
  double[][] p=new double[2][2];
  double[][] q=new double[2][2];
  for (int i=0; i < p.length; i++) {
    p[i][0]=i;
    p[i][1]=dist.p(p[i][0]);
    q[i][0]=i;
    q[i][1]=dist.cdf(p[i][0]);
  }
  double[] lowerBound={0.0,0.0};
  double[] upperBound={1.0,1.0};
  pdf=new PlotCanvas(lowerBound,upperBound);
  pdf.add(new BarPlot(p));
  pdf.setTitle("PDF");
  canvas.add(pdf);
  cdf=new PlotCanvas(lowerBound,upperBound);
  cdf.staircase(q,Color.BLACK);
  cdf.setTitle("CDF");
  canvas.add(cdf);
  double[] data=new double[500];
  for (int i=0; i < data.length; i++) {
    data[i]=dist.rand();
  }
  histogram=Histogram.plot(data,2);
  histogram.setTitle("Histogram");
  canvas.add(histogram);
}
