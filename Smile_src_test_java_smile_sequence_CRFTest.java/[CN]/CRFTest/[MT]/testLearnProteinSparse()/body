{
  System.out.println("learn protein sparse");
  IntDataset train=load("/smile/data/sequence/sparse.protein.11.train");
  IntDataset test=load("/smile/data/sequence/sparse.protein.11.test");
  CRF.Trainer trainer=new CRF.Trainer(train.p,train.k);
  trainer.setLearningRate(0.3);
  trainer.setMaximumLeafNodes(100);
  trainer.setNumIterations(100);
  CRF crf=trainer.train(train.x,train.y);
  int error=0;
  int n=0;
  for (int i=0; i < test.x.length; i++) {
    n+=test.x[i].length;
    int[] label=crf.predict(test.x[i]);
    for (int j=0; j < test.x[i].length; j++) {
      if (test.y[i][j] != label[j]) {
        error++;
      }
    }
  }
  int viterbiError=0;
  crf.setViterbi(true);
  for (int i=0; i < test.x.length; i++) {
    n+=test.x[i].length;
    int[] label=crf.predict(test.x[i]);
    for (int j=0; j < test.x[i].length; j++) {
      if (test.y[i][j] != label[j]) {
        viterbiError++;
      }
    }
  }
  System.out.format("Protein error (forward-backward) is %d of %d\n",error,n);
  System.out.format("Protein error (forward-backward) rate = %.2f%%\n",100.0 * error / n);
  System.out.format("Protein error (Viterbi) is %d of %d\n",viterbiError,n);
  System.out.format("Protein error (Viterbi) rate = %.2f%%\n",100.0 * viterbiError / n);
  assertEquals(1259,error);
  assertEquals(1377,viterbiError);
}
