{
  if (k <= 0) {
    throw new IllegalArgumentException("Invalid k: " + k);
  }
  if (k > data.length) {
    throw new IllegalArgumentException("Neighbor array length is larger than the dataset size");
  }
  SimpleNeighbor<T> neighbor=new SimpleNeighbor<T>(null,0,Double.MAX_VALUE);
  @SuppressWarnings("unchecked") SimpleNeighbor<T>[] neighbors=(SimpleNeighbor<T>[])java.lang.reflect.Array.newInstance(neighbor.getClass(),k);
  HeapSelect<Neighbor<T,T>> heap=new HeapSelect<Neighbor<T,T>>(neighbors);
  for (int i=0; i < k; i++) {
    heap.add(neighbor);
    neighbor=new SimpleNeighbor<T>(null,0,Double.MAX_VALUE);
  }
  for (int i=0; i < data.length; i++) {
    if (q == data[i] && identicalExcluded) {
      continue;
    }
    double dist=distance.d(q,data[i]);
    Neighbor<T,T> datum=heap.peek();
    if (dist < datum.distance) {
      datum.distance=dist;
      datum.index=i;
      datum.key=data[i];
      datum.value=data[i];
      heap.heapify();
    }
  }
  heap.sort();
  return neighbors;
}
