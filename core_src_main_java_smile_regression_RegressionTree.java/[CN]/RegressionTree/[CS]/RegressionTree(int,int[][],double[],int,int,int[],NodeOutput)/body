{
  if (x.length != y.length) {
    throw new IllegalArgumentException(String.format("The sizes of X and Y don't match: %d != %d",x.length,y.length));
  }
  if (maxNodes < 2) {
    throw new IllegalArgumentException("Invalid maximum number of leaves: " + maxNodes);
  }
  if (nodeSize < 2) {
    throw new IllegalArgumentException("Invalid minimum size of leaf nodes: " + nodeSize);
  }
  this.maxNodes=maxNodes;
  this.nodeSize=nodeSize;
  this.numFeatures=numFeatures;
  this.mtry=numFeatures;
  importance=new double[numFeatures];
  PriorityQueue<SparseBinaryTrainNode> nextSplits=new PriorityQueue<>();
  int n=0;
  double sum=0.0;
  if (samples == null) {
    n=y.length;
    samples=new int[n];
    for (int i=0; i < n; i++) {
      samples[i]=1;
      sum+=y[i];
    }
  }
 else {
    for (int i=0; i < y.length; i++) {
      n+=samples[i];
      sum+=samples[i] * y[i];
    }
  }
  root=new Node(sum / n);
  SparseBinaryTrainNode trainRoot=new SparseBinaryTrainNode(root,x,y,samples);
  if (trainRoot.findBestSplit()) {
    nextSplits.add(trainRoot);
  }
  for (int leaves=1; leaves < this.maxNodes; leaves++) {
    SparseBinaryTrainNode node=nextSplits.poll();
    if (node == null) {
      break;
    }
    node.split(nextSplits);
  }
  if (output != null) {
    trainRoot.calculateOutput(output);
  }
}
