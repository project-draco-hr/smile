{
  Node split=new Node(0.0);
  if (attributes[j].getType() == Attribute.Type.NOMINAL) {
    int m=((NominalAttribute)attributes[j]).size();
    double[] trueSum=new double[m];
    int[] trueCount=new int[m];
    for (int i=0; i < x.length; i++) {
      if (samples[i] > 0) {
        double target=samples[i] * y[i];
        int index=(int)x[i][j];
        trueSum[index]+=target;
        trueCount[index]+=samples[i];
      }
    }
    for (int k=0; k < m; k++) {
      double tc=(double)trueCount[k];
      double fc=n - tc;
      if (tc < nodeSize || fc < nodeSize) {
        continue;
      }
      double trueMean=trueSum[k] / tc;
      double falseMean=(sum - trueSum[k]) / fc;
      double gain=(tc * trueMean * trueMean + fc * falseMean * falseMean) - n * split.output * split.output;
      if (gain > split.splitScore) {
        split.splitFeature=j;
        split.splitValue=k;
        split.splitScore=gain;
        split.trueChildOutput=trueMean;
        split.falseChildOutput=falseMean;
      }
    }
  }
 else   if (attributes[j].getType() == Attribute.Type.NUMERIC) {
    double trueSum=0.0;
    int trueCount=0;
    double prevx=Double.NaN;
    for (    int i : order[j]) {
      if (samples[i] > 0) {
        if (Double.isNaN(prevx) || x[i][j] == prevx) {
          prevx=x[i][j];
          trueSum+=samples[i] * y[i];
          trueCount+=samples[i];
          continue;
        }
        double falseCount=n - trueCount;
        if (trueCount < nodeSize || falseCount < nodeSize) {
          prevx=x[i][j];
          trueSum+=samples[i] * y[i];
          trueCount+=samples[i];
          continue;
        }
        double trueMean=trueSum / trueCount;
        double falseMean=(sum - trueSum) / falseCount;
        double gain=(trueCount * trueMean * trueMean + falseCount * falseMean * falseMean) - n * split.output * split.output;
        if (gain > split.splitScore) {
          split.splitFeature=j;
          split.splitValue=(x[i][j] + prevx) / 2;
          split.splitScore=gain;
          split.trueChildOutput=trueMean;
          split.falseChildOutput=falseMean;
        }
        prevx=x[i][j];
        trueSum+=samples[i] * y[i];
        trueCount+=samples[i];
      }
    }
  }
 else {
    throw new IllegalStateException("Unsupported attribute type: " + attributes[j].getType());
  }
  return split;
}
