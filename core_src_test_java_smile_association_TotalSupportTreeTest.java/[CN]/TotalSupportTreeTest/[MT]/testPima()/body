{
  System.out.println("pima");
  List<int[]> dataList=new ArrayList<>(1000);
  try {
    BufferedReader input=smile.data.parser.IOUtils.getTestDataReader("transaction/pima.D38.N768.C2");
    String line;
    for (int nrow=0; (line=input.readLine()) != null; nrow++) {
      if (line.trim().isEmpty()) {
        continue;
      }
      String[] s=line.split(" ");
      int[] point=new int[s.length];
      for (int i=0; i < s.length; i++) {
        point[i]=Integer.parseInt(s[i]);
      }
      dataList.add(point);
    }
  }
 catch (  IOException ex) {
    System.err.println(ex);
  }
  int[][] data=dataList.toArray(new int[dataList.size()][]);
  int n=Math.max(data);
  System.out.format("%d transactions, %d items%n",data.length,n);
  long time=System.currentTimeMillis();
  FPGrowth fpgrowth=new FPGrowth(data,20);
  System.out.format("Done building FP-tree: %.2f secs.%n",(System.currentTimeMillis() - time) / 1000.0);
  time=System.currentTimeMillis();
  TotalSupportTree ttree=fpgrowth.buildTotalSupportTree();
  System.out.format("Done building total support tree: %.2f secs.%n",(System.currentTimeMillis() - time) / 1000.0);
  time=System.currentTimeMillis();
  long numItemsets=ttree.getFrequentItemsets(System.out);
  System.out.format("%d frequent item sets discovered: %.2f secs.%n",numItemsets,(System.currentTimeMillis() - time) / 1000.0);
  assertEquals(1803,numItemsets);
  assertEquals(1803,ttree.getFrequentItemsets().size());
}
