{
  if (x.length != y.length) {
    throw new IllegalArgumentException(String.format("The sizes of X and Y don't match: %d != %d",x.length,y.length));
  }
  if (priori != null) {
    if (priori.length < 2) {
      throw new IllegalArgumentException("Invalid number of priori probabilities: " + priori.length);
    }
    double sum=0.0;
    for (    double pr : priori) {
      if (pr <= 0.0 || pr >= 1.0) {
        throw new IllegalArgumentException("Invlaid priori probability: " + pr);
      }
      sum+=pr;
    }
    if (Math.abs(sum - 1.0) > 1E-10) {
      throw new IllegalArgumentException("The sum of priori probabilities is not one: " + sum);
    }
  }
  int[] labels=Math.unique(y);
  Arrays.sort(labels);
  for (int i=0; i < labels.length; i++) {
    if (labels[i] < 0) {
      throw new IllegalArgumentException("Negative class label: " + labels[i]);
    }
    if (i > 0 && labels[i] - labels[i - 1] > 1) {
      throw new IllegalArgumentException("Missing class: " + labels[i] + 1);
    }
  }
  k=labels.length;
  if (k < 2) {
    throw new IllegalArgumentException("Only one class.");
  }
  if (priori != null && k != priori.length) {
    throw new IllegalArgumentException("The number of classes and the number of priori probabilities don't match.");
  }
  if (tol < 0.0) {
    throw new IllegalArgumentException("Invalid tol: " + tol);
  }
  final int n=x.length;
  if (n <= k) {
    throw new IllegalArgumentException(String.format("Sample size is too small: %d <= %d",n,k));
  }
  p=x[0].length;
  int[] ni=new int[k];
  double[] mean=Math.colMean(x);
  double[][] C=new double[p][p];
  mu=new double[k][p];
  for (int i=0; i < n; i++) {
    int c=y[i];
    ni[c]++;
    for (int j=0; j < p; j++) {
      mu[c][j]+=x[i][j];
    }
  }
  for (int i=0; i < k; i++) {
    for (int j=0; j < p; j++) {
      mu[i][j]/=ni[i];
    }
  }
  if (priori == null) {
    priori=new double[k];
    for (int i=0; i < k; i++) {
      priori[i]=(double)ni[i] / n;
    }
  }
  this.priori=priori;
  ct=new double[k];
  for (int i=0; i < k; i++) {
    ct[i]=Math.log(priori[i]);
  }
  for (int i=0; i < n; i++) {
    for (int j=0; j < p; j++) {
      for (int l=0; l <= j; l++) {
        C[j][l]+=(x[i][j] - mean[j]) * (x[i][l] - mean[l]);
      }
    }
  }
  tol=tol * tol;
  for (int j=0; j < p; j++) {
    for (int l=0; l <= j; l++) {
      C[j][l]/=(n - k);
      C[l][j]=C[j][l];
    }
    if (C[j][j] < tol) {
      throw new IllegalArgumentException(String.format("Covariance matrix (variable %d) is close to singular.",j));
    }
  }
  EigenValueDecomposition evd=EigenValueDecomposition.decompose(C,true);
  for (  double s : evd.getEigenValues()) {
    if (s < tol) {
      throw new IllegalArgumentException("The covariance matrix is close to singular.");
    }
  }
  eigen=evd.getEigenValues();
  scaling=evd.getEigenVectors();
}
