{
  if (l < k || l >= data.length) {
    throw new IllegalArgumentException("Invalid number of random samples: " + l);
  }
  if (k < 2) {
    throw new IllegalArgumentException("Invalid number of clusters: " + k);
  }
  if (sigma <= 0.0) {
    throw new IllegalArgumentException("Invalid standard deviation of Gaussian kernel: " + sigma);
  }
  this.k=k;
  this.sigma=sigma;
  int n=data.length;
  double gamma=-0.5 / (sigma * sigma);
  int[] index=Math.permutate(n);
  double[][] x=new double[n][];
  for (int i=0; i < n; i++) {
    x[i]=data[index[i]];
  }
  data=x;
  double[][] C=new double[n][l];
  double[] D=new double[n];
  for (int i=0; i < n; i++) {
    double sum=0.0;
    for (int j=0; j < n; j++) {
      if (i != j) {
        double w=Math.exp(gamma * Math.squaredDistance(data[i],data[j]));
        sum+=w;
        if (j < l) {
          C[i][j]=w;
        }
      }
    }
    if (sum < 1E-5) {
      logger.error(String.format("Small D[%d] = %f. The data may contain outliers.",i,sum));
    }
    D[i]=1.0 / Math.sqrt(sum);
  }
  for (int i=0; i < n; i++) {
    for (int j=0; j < l; j++) {
      C[i][j]=D[i] * C[i][j] * D[j];
    }
  }
  double[][] W=new double[l][l];
  for (int i=0; i < l; i++) {
    System.arraycopy(C[i],0,W[i],0,l);
  }
  EigenValueDecomposition eigen=Math.eigen(W,k);
  double[] e=eigen.getEigenValues();
  double scale=Math.sqrt((double)l / n);
  for (int i=0; i < k; i++) {
    if (e[i] <= 0.0) {
      throw new IllegalStateException("Non-positive eigen value: " + e[i]);
    }
    e[i]=scale / e[i];
  }
  double[][] U=eigen.getEigenVectors();
  for (int i=0; i < l; i++) {
    for (int j=0; j < k; j++) {
      U[i][j]*=e[j];
    }
  }
  double[][] Y=Math.abmm(C,U);
  for (int i=0; i < n; i++) {
    Math.unitize2(Y[i]);
  }
  KMeans kmeans=new KMeans(Y,k);
  distortion=kmeans.distortion;
  size=kmeans.getClusterSize();
  int[] label=kmeans.getClusterLabel();
  y=new int[n];
  for (int i=0; i < n; i++) {
    y[index[i]]=label[i];
  }
}
