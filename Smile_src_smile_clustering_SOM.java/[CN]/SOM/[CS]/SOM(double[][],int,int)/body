{
  if (height <= 0 || width <= 0 || height * width == 1) {
    throw new IllegalArgumentException("Invalide map width = " + width + " or height = "+ height);
  }
  this.width=width;
  this.height=height;
  this.d=data[0].length;
  int n=data.length;
  neurons=new double[height][width][d];
  bmu=new int[n][2];
  double mpd=Math.max(0.5,height * width / (double)n);
  int roughTrainLen=(int)Math.ceil(10 * mpd);
  int fineTrainLen=(int)Math.ceil(40 * mpd);
  int trainLen=roughTrainLen + fineTrainLen;
  double initRadius=Math.max(1.0,Math.max(height,width) / 2.0);
  double finalRadius=Math.max(1.0,initRadius / 4.0);
  double[] radius=new double[trainLen];
  for (int i=0; i < roughTrainLen; i++) {
    radius[roughTrainLen - i - 1]=finalRadius + (double)i / (roughTrainLen - 1) * (initRadius - finalRadius);
  }
  initRadius=finalRadius - 1.0 / (fineTrainLen - 1);
  finalRadius=1;
  for (int i=0; i < fineTrainLen; i++) {
    radius[roughTrainLen + fineTrainLen - i - 1]=finalRadius + (double)i / (fineTrainLen - 1) * (initRadius - finalRadius);
  }
  for (int i=0; i < trainLen; i++) {
    radius[i]=radius[i] * radius[i];
  }
  double[] mu=new double[d];
  for (int i=0; i < n; i++) {
    for (int j=0; j < d; j++) {
      mu[j]+=data[i][j];
    }
  }
  for (int i=0; i < d; i++) {
    mu[i]/=n;
  }
  double[][] D=new double[n][d];
  for (int i=0; i < n; i++) {
    for (int j=0; j < d; j++) {
      D[i][j]=data[i][j] - mu[j];
    }
  }
  double[][] V=new double[d][d];
  for (int i=0; i < d; i++) {
    for (int j=i; j < d; j++) {
      for (int k=0; k < n; k++) {
        V[i][j]+=D[k][i] * D[k][j];
      }
      V[i][j]/=n;
      V[j][i]=V[i][j];
    }
  }
  EigenValueDecomposition eigen=Math.eigen(V,2);
  double[] v1=new double[d];
  double[] v2=new double[d];
  for (int i=0; i < d; i++) {
    v1[i]=eigen.getEigenVectors()[i][0];
    v2[i]=eigen.getEigenVectors()[i][1];
  }
  for (int i=0; i < height; i++) {
    double w=(double)i / height - 0.5;
    for (int j=0; j < width; j++) {
      double h=(double)j / width - 0.5;
      for (int k=0; k < d; k++) {
        neurons[i][j][k]=mu[k] + w * v1[k] + h * v2[k];
      }
    }
  }
  BBDTree bbd=new BBDTree(data);
  double[][] centroids=new double[width * height][];
  double[][] sums=new double[width * height][d];
  int[] hit=new int[width * height];
  int[] sy=new int[n];
  for (int i=0, k=0; i < height; i++) {
    for (int j=0; j < width; j++, k++) {
      centroids[k]=neurons[i][j];
    }
  }
  for (int iter=0; iter < trainLen; iter++) {
    int r=(int)Math.round(Math.sqrt(radius[iter]));
    double distortion=bbd.clustering(centroids,sums,hit,sy);
    System.out.format("SOM distortion after %3d iterations (radius = %d): %.5f\n",iter + 1,r,distortion);
    for (int i=0; i < height; i++) {
      for (int j=0; j < width; j++) {
        double denom=0.0;
        Arrays.fill(neurons[i][j],0.0);
        int minH=Math.max(0,i - 3 * r) + 1;
        int maxH=Math.min(height,i + 3 * r) - 1;
        int minW=Math.max(0,j - 3 * r) + 1;
        int maxW=Math.min(width,j + 3 * r) - 1;
        int hits=0;
        while (hits == 0) {
          minH=Math.max(0,minH - 1);
          maxH=Math.min(height,maxH + 1);
          minW=Math.max(0,minW - 1);
          maxW=Math.min(width,maxW + 1);
          for (int s=minH; s < maxH; s++) {
            for (int t=minW; t < maxW; t++) {
              int pos=s * width + t;
              hits+=hit[pos];
            }
          }
        }
        for (int s=minH; s < maxH; s++) {
          for (int t=minW; t < maxW; t++) {
            int pos=s * width + t;
            if (hit[pos] > 0) {
              int dx=i - s;
              int dy=j - t;
              double h=Math.exp(-(dx * dx + dy * dy) / (2 * radius[iter]));
              denom+=h * hit[pos];
              for (int k=0; k < d; k++) {
                neurons[i][j][k]+=h * sums[pos][k];
              }
            }
          }
        }
        for (int k=0; k < d; k++) {
          neurons[i][j][k]/=denom;
        }
      }
    }
  }
  for (int i=0; i < n; i++) {
    bmu[i][0]=sy[i] / width;
    bmu[i][1]=sy[i] % width;
  }
  voronoi=new int[height][width];
  voronoi=new int[height][width];
  for (int i=0; i < bmu.length; i++) {
    voronoi[bmu[i][0]][bmu[i][1]]++;
  }
  umatrix=new double[height][width];
  for (int i=0; i < height - 1; i++) {
    for (int j=0; j < width - 1; j++) {
      double dist=Math.sqrt(Math.squaredDistance(neurons[i][j],neurons[i][j + 1]));
      umatrix[i][j]=Math.max(umatrix[i][j],dist);
      umatrix[i][j + 1]=Math.max(umatrix[i][j + 1],dist);
      dist=Math.sqrt(Math.squaredDistance(neurons[i][j],neurons[i + 1][j]));
      umatrix[i][j]=Math.max(umatrix[i][j],dist);
      umatrix[i + 1][j]=Math.max(umatrix[i + 1][j],dist);
    }
  }
  for (int i=0; i < height - 1; i++) {
    double dist=Math.sqrt(Math.squaredDistance(neurons[i][width - 1],neurons[i + 1][width - 1]));
    umatrix[i][width - 1]=Math.max(umatrix[i][width - 1],dist);
    umatrix[i + 1][width - 1]=Math.max(umatrix[i + 1][width - 1],dist);
  }
  for (int j=0; j < width - 1; j++) {
    double dist=Math.sqrt(Math.squaredDistance(neurons[height - 1][j],neurons[height - 1][j + 1]));
    umatrix[height - 1][j]=Math.max(umatrix[height - 1][j],dist);
    umatrix[height - 1][j + 1]=Math.max(umatrix[height - 1][j + 1],dist);
  }
  umatrix[height - 1][width - 1]=Math.max(umatrix[height - 1][width - 2],umatrix[height - 2][width - 1]);
}
