{
  this.data=data;
  int m=data.length;
  int n=data[0].length;
  zc=new double[m][n];
  triangles=new int[2 * m * n][6];
  az=new double[2 * m * n];
  order=new int[az.length];
  min=Double.POSITIVE_INFINITY;
  max=Double.NEGATIVE_INFINITY;
  for (int i=0, k=0; i < m; i++) {
    for (int j=0; j < n; j++, k+=2) {
      double z=data[i][j][2];
      if (z < min) {
        min=z;
      }
      if (z > max) {
        max=z;
      }
      if (i < m - 1 && j < n - 1) {
        triangles[k][0]=i;
        triangles[k][1]=j;
        triangles[k][2]=i + 1;
        triangles[k][3]=j;
        triangles[k][4]=i;
        triangles[k][5]=j + 1;
        triangles[k + 1][0]=i + 1;
        triangles[k + 1][1]=j + 1;
        triangles[k + 1][2]=i + 1;
        triangles[k + 1][3]=j;
        triangles[k + 1][4]=i;
        triangles[k + 1][5]=j + 1;
      }
    }
  }
  if (palette != null) {
    width=(max - min) / palette.length;
  }
}
