{
  int d=data[0].length;
  Node node=new Node(d);
  node.count=end - begin;
  node.index=begin;
  double[] lowerBound=new double[d];
  double[] upperBound=new double[d];
  for (int i=0; i < d; i++) {
    lowerBound[i]=data[index[begin]][i];
    upperBound[i]=data[index[begin]][i];
  }
  for (int i=begin + 1; i < end; i++) {
    for (int j=0; j < d; j++) {
      double c=data[index[i]][j];
      if (lowerBound[j] > c) {
        lowerBound[j]=c;
      }
      if (upperBound[j] < c) {
        upperBound[j]=c;
      }
    }
  }
  double maxRadius=-1;
  int splitIndex=-1;
  for (int i=0; i < d; i++) {
    node.center[i]=(lowerBound[i] + upperBound[i]) / 2;
    node.radius[i]=(upperBound[i] - lowerBound[i]) / 2;
    if (node.radius[i] > maxRadius) {
      maxRadius=node.radius[i];
      splitIndex=i;
    }
  }
  if (maxRadius < 1E-10) {
    node.lower=node.upper=null;
    System.arraycopy(data[index[begin]],0,node.sum,0,d);
    if (end > begin + 1) {
      int len=end - begin;
      for (int i=0; i < d; i++) {
        node.sum[i]*=len;
      }
    }
    node.cost=0;
    return node;
  }
  double splitCutoff=node.center[splitIndex];
  int i1=begin, i2=end - 1, size=0;
  while (i1 <= i2) {
    boolean i1Good=(data[index[i1]][splitIndex] < splitCutoff);
    boolean i2Good=(data[index[i2]][splitIndex] >= splitCutoff);
    if (!i1Good && !i2Good) {
      int temp=index[i1];
      index[i1]=index[i2];
      index[i2]=temp;
      i1Good=i2Good=true;
    }
    if (i1Good) {
      i1++;
      size++;
    }
    if (i2Good) {
      i2--;
    }
  }
  node.lower=buildNode(data,begin,begin + size);
  node.upper=buildNode(data,begin + size,end);
  for (int i=0; i < d; i++) {
    node.sum[i]=node.lower.sum[i] + node.upper.sum[i];
  }
  double[] mean=new double[d];
  for (int i=0; i < d; i++) {
    mean[i]=node.sum[i] / node.count;
  }
  node.cost=getNodeCost(node.lower,mean) + getNodeCost(node.upper,mean);
  return node;
}
