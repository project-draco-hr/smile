{
  int n=x.length;
  int[] samples=new int[n];
  if (subsample == 1.0) {
    for (int i=0; i < n; i++) {
      int xi=Math.randomInt(n);
      samples[xi]+=classWeight[y[xi]];
    }
  }
 else {
    int[] perm=new int[n];
    for (int i=0; i < n; i++) {
      perm[i]=i;
    }
    Math.permutate(perm);
    int m=(int)(n * 0.632);
    for (int i=0; i < m; i++) {
      samples[perm[i]]+=classWeight[y[perm[i]]];
    }
  }
  DecisionTree tree=new DecisionTree(attributes,x,y,maxNodes,nodeSize,mtry,rule,samples,order);
  int oob=0;
  int correct=0;
  for (int i=0; i < n; i++) {
    if (samples[i] == 0) {
      oob++;
      int p=tree.predict(x[i]);
      if (p == y[i])       correct++;
synchronized (prediction[i]) {
        prediction[i][p]++;
      }
    }
  }
  double accuracy=1.0;
  if (oob != 0) {
    accuracy=(double)correct / oob;
  }
 else {
    System.err.println("Random forest has a tree trained without OOB samples.");
  }
  return new Tree(tree,accuracy);
}
