{
  if (k < 2) {
    throw new IllegalArgumentException("Invalid number of clusters: " + k);
  }
  if (sigma <= 0.0) {
    throw new IllegalArgumentException("Invalid standard deviation of Gaussian kernel: " + sigma);
  }
  this.k=k;
  this.sigma=sigma;
  int n=data.length;
  double gamma=-0.5 / (sigma * sigma);
  double[][] W=new double[n][n];
  for (int i=0; i < n; i++) {
    for (int j=0; j < i; j++) {
      W[i][j]=Math.exp(gamma * Math.squaredDistance(data[i],data[j]));
      W[j][i]=W[i][j];
    }
  }
  double[] D=new double[n];
  for (int i=0; i < n; i++) {
    for (int j=0; j < n; j++) {
      D[i]+=W[i][j];
    }
    if (D[i] < 1E-5) {
      System.err.format("Small D[%d] = %f. The data may contain outliers.\n",i,D[i]);
    }
    D[i]=1.0 / Math.sqrt(D[i]);
  }
  double[][] L=W;
  for (int i=0; i < n; i++) {
    for (int j=0; j < i; j++) {
      L[i][j]=D[i] * W[i][j] * D[j];
      L[j][i]=L[i][j];
    }
  }
  EigenValueDecomposition eigen=Math.eigen(L,k);
  double[][] Y=eigen.getEigenVectors();
  for (int i=0; i < n; i++) {
    Math.unitize2(Y[i]);
  }
  KMeans kmeans=new KMeans(Y,k);
  distortion=kmeans.distortion;
  y=kmeans.getClusterLabel();
  size=kmeans.getClusterSize();
}
