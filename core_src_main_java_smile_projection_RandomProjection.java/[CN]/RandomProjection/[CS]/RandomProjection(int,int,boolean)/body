{
  if (n < 2) {
    throw new IllegalArgumentException("Invalid dimension of input space: " + n);
  }
  if (p < 1 || p > n) {
    throw new IllegalArgumentException("Invalid dimension of feature space: " + p);
  }
  this.n=n;
  this.p=p;
  projection=new double[p][n];
  if (sparse) {
    double scale=Math.sqrt(3);
    for (int i=0; i < p; i++) {
      for (int j=0; j < n; j++) {
        projection[i][j]=scale * (Math.random(prob) - 1);
      }
    }
  }
 else {
    GaussianDistribution gauss=GaussianDistribution.getInstance();
    for (int i=0; i < p; i++) {
      for (int j=0; j < n; j++) {
        projection[i][j]=gauss.rand();
      }
    }
    Math.unitize(projection[0]);
    for (int i=1; i < p; i++) {
      for (int j=0; j < i; j++) {
        double t=-Math.dot(projection[i],projection[j]);
        Math.axpy(t,projection[j],projection[i]);
      }
      Math.unitize(projection[i]);
    }
  }
}
