{
  double f=Double.NaN;
  int p=w.length - 1;
  if (ftasks != null) {
    for (    FTask task : ftasks) {
      task.w=w;
    }
    try {
      f=0.0;
      for (      double fi : MulticoreExecutor.run(ftasks)) {
        f+=fi;
      }
    }
 catch (    Exception ex) {
      logger.error("Failed to train Logistic Regression on multi-core",ex);
      f=Double.NaN;
    }
  }
  if (Double.isNaN(f)) {
    f=0.0;
    int n=x.length;
    for (int i=0; i < n; i++) {
      double wx=dot(x[i],w);
      f+=log1pe(wx) - y[i] * wx;
    }
  }
  if (lambda != 0.0) {
    double w2=0.0;
    for (int i=0; i < p; i++) {
      w2+=w[i] * w[i];
    }
    f+=0.5 * lambda * w2;
  }
  return f;
}
