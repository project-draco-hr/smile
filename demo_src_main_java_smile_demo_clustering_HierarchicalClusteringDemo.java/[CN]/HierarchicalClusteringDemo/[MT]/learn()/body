{
  long clock=System.currentTimeMillis();
  double[][] data=dataset[datasetIndex];
  int n=data.length;
  double[][] proximity=new double[n][];
  for (int i=0; i < n; i++) {
    proximity[i]=new double[i + 1];
    for (int j=0; j < i; j++)     proximity[i][j]=Math.distance(data[i],data[j]);
  }
  HierarchicalClustering hac=null;
switch (linkageBox.getSelectedIndex()) {
case 0:
    hac=new HierarchicalClustering(new SingleLinkage(proximity));
  break;
case 1:
hac=new HierarchicalClustering(new CompleteLinkage(proximity));
break;
case 2:
hac=new HierarchicalClustering(new UPGMALinkage(proximity));
break;
case 3:
hac=new HierarchicalClustering(new WPGMALinkage(proximity));
break;
case 4:
hac=new HierarchicalClustering(new UPGMCLinkage(proximity));
break;
case 5:
hac=new HierarchicalClustering(new WPGMCLinkage(proximity));
break;
case 6:
hac=new HierarchicalClustering(new WardLinkage(proximity));
break;
default :
throw new IllegalStateException("Unsupported Linkage");
}
System.out.format("Hierarchical clusterings %d samples in %dms\n",dataset[datasetIndex].length,System.currentTimeMillis() - clock);
int[] membership=hac.partition(clusterNumber);
int[] clusterSize=new int[clusterNumber];
for (int i=0; i < membership.length; i++) {
clusterSize[membership[i]]++;
}
JPanel pane=new JPanel(new GridLayout(1,3));
PlotCanvas plot=ScatterPlot.plot(dataset[datasetIndex],pointLegend);
plot.setTitle("Data");
pane.add(plot);
for (int k=0; k < clusterNumber; k++) {
double[][] cluster=new double[clusterSize[k]][];
for (int i=0, j=0; i < dataset[datasetIndex].length; i++) {
if (membership[i] == k) {
cluster[j++]=dataset[datasetIndex][i];
}
}
plot.points(cluster,pointLegend,Palette.COLORS[k % Palette.COLORS.length]);
}
plot=Dendrogram.plot("Dendrogram",hac.getTree(),hac.getHeight());
plot.setTitle("Dendrogram");
pane.add(plot);
return pane;
}
