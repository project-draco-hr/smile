{
  System.out.println("USPS");
  double[][] x=null;
  double[][] testx=null;
  long start=System.currentTimeMillis();
  DelimitedTextParser parser=new DelimitedTextParser();
  parser.setResponseIndex(new NominalAttribute("class"),0);
  try {
    AttributeDataset train=parser.parse("USPS Train",this.getClass().getResourceAsStream("/smile/data/usps/zip.train"));
    AttributeDataset test=parser.parse("USPS Test",this.getClass().getResourceAsStream("/smile/data/usps/zip.test"));
    x=train.toArray(new double[train.size()][]);
    testx=test.toArray(new double[test.size()][]);
  }
 catch (  Exception ex) {
    System.err.println(ex);
  }
  double time=(System.currentTimeMillis() - start) / 1000.0;
  System.out.format("Loading USPS: %.2fs\n",time);
  start=System.currentTimeMillis();
  KDTree<double[]> kdtree=new KDTree<double[]>(x,x);
  time=(System.currentTimeMillis() - start) / 1000.0;
  System.out.format("Building KD-tree: %.2fs\n",time);
  start=System.currentTimeMillis();
  for (int i=0; i < testx.length; i++) {
    kdtree.nearest(testx[i]);
  }
  time=(System.currentTimeMillis() - start) / 1000.0;
  System.out.format("NN: %.2fs\n",time);
  start=System.currentTimeMillis();
  for (int i=0; i < testx.length; i++) {
    kdtree.knn(testx[i],10);
  }
  time=(System.currentTimeMillis() - start) / 1000.0;
  System.out.format("10-NN: %.2fs\n",time);
  start=System.currentTimeMillis();
  List<Neighbor<double[],double[]>> n=new ArrayList<Neighbor<double[],double[]>>();
  for (int i=0; i < testx.length; i++) {
    kdtree.range(testx[i],8.0,n);
    n.clear();
  }
  time=(System.currentTimeMillis() - start) / 1000.0;
  System.out.format("Range: %.2fs\n",time);
}
