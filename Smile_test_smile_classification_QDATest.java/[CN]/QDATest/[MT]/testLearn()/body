{
  System.out.println("learn");
  ArffParser arffParser=new ArffParser();
  arffParser.setResponseIndex(4);
  try {
    AttributeDataset iris=arffParser.parse(this.getClass().getResourceAsStream("/smile/data/weka/iris.arff"));
    double[][] x=iris.toArray(new double[iris.size()][]);
    int[] y=iris.toArray(new int[iris.size()]);
    int n=x.length;
    LOOCV loocv=new LOOCV(n);
    int error=0;
    double[] posteriori=new double[3];
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      QDA qda=new QDA(trainx,trainy);
      if (y[loocv.test[i]] != qda.predict(x[loocv.test[i]],posteriori))       error++;
    }
    System.out.println("QDA error = " + error);
    assertEquals(4,error);
  }
 catch (  Exception ex) {
    System.err.println(ex);
  }
}
