{
  ArrayList<Leaf> leaves=new ArrayList<Leaf>();
  ArrayList<double[]> centers=new ArrayList<double[]>();
  Queue<Node> queue=new LinkedList<Node>();
  queue.offer(root);
  for (Node node=queue.poll(); node != null; node=queue.poll()) {
    if (node.numChildren == 0) {
      if (node.n >= minPts) {
        double[] x=new double[d];
        for (int i=0; i < d; i++) {
          x[i]=node.sum[i] / node.n;
        }
        centers.add(x);
        leaves.add((Leaf)node);
      }
 else {
        Leaf leaf=(Leaf)node;
        leaf.y=OUTLIER;
      }
    }
 else {
      for (int i=0; i < node.numChildren; i++) {
        queue.offer(node.children[i]);
      }
    }
  }
  int n=centers.size();
  centroids=centers.toArray(new double[n][]);
  if (n > k) {
    double[][] proximity=new double[n][];
    for (int i=0; i < n; i++) {
      proximity[i]=new double[i + 1];
      for (int j=0; j < i; j++) {
        proximity[i][j]=Math.distance(centroids[i],centroids[j]);
      }
    }
    Linkage linkage=new WardLinkage(proximity);
    HierarchicalClustering hc=new HierarchicalClustering(linkage);
    int[] y=hc.partition(k);
    for (int i=0; i < n; i++) {
      leaves.get(i).y=y[i];
    }
  }
 else {
    for (int i=0; i < n; i++) {
      leaves.get(i).y=i;
    }
  }
  return n;
}
