{
  int n=A.length;
  int nn, m, l, k, j, its, i, mmin;
  double z, y, x, w, v, u, t, s, r=0.0, q=0.0, p=0.0, anorm=0.0;
  for (i=0; i < n; i++) {
    for (j=Math.max(i - 1,0); j < n; j++) {
      anorm+=Math.abs(A[i][j]);
    }
  }
  nn=n - 1;
  t=0.0;
  while (nn >= 0) {
    its=0;
    do {
      for (l=nn; l > 0; l--) {
        s=Math.abs(A[l - 1][l - 1]) + Math.abs(A[l][l]);
        if (s == 0.0) {
          s=anorm;
        }
        if (Math.abs(A[l][l - 1]) <= Math.EPSILON * s) {
          A[l][l - 1]=0.0;
          break;
        }
      }
      x=A[nn][nn];
      if (l == nn) {
        d[nn--]=x + t;
      }
 else {
        y=A[nn - 1][nn - 1];
        w=A[nn][nn - 1] * A[nn - 1][nn];
        if (l == nn - 1) {
          p=0.5 * (y - x);
          q=p * p + w;
          z=Math.sqrt(Math.abs(q));
          x+=t;
          if (q >= 0.0) {
            z=p + Math.copySign(z,p);
            d[nn - 1]=d[nn]=x + z;
            if (z != 0.0) {
              d[nn]=x - w / z;
            }
          }
 else {
            d[nn]=x + p;
            e[nn]=-z;
            d[nn - 1]=d[nn];
            e[nn - 1]=-e[nn];
          }
          nn-=2;
        }
 else {
          if (its == 30) {
            throw new IllegalStateException("Too many iterations in hqr");
          }
          if (its == 10 || its == 20) {
            t+=x;
            for (i=0; i < nn + 1; i++) {
              A[i][i]-=x;
            }
            s=Math.abs(A[nn][nn - 1]) + Math.abs(A[nn - 1][nn - 2]);
            y=x=0.75 * s;
            w=-0.4375 * s * s;
          }
          ++its;
          for (m=nn - 2; m >= l; m--) {
            z=A[m][m];
            r=x - z;
            s=y - z;
            p=(r * s - w) / A[m + 1][m] + A[m][m + 1];
            q=A[m + 1][m + 1] - z - r- s;
            r=A[m + 2][m + 1];
            s=Math.abs(p) + Math.abs(q) + Math.abs(r);
            p/=s;
            q/=s;
            r/=s;
            if (m == l) {
              break;
            }
            u=Math.abs(A[m][m - 1]) * (Math.abs(q) + Math.abs(r));
            v=Math.abs(p) * (Math.abs(A[m - 1][m - 1]) + Math.abs(z) + Math.abs(A[m + 1][m + 1]));
            if (u <= Math.EPSILON * v) {
              break;
            }
          }
          for (i=m; i < nn - 1; i++) {
            A[i + 2][i]=0.0;
            if (i != m) {
              A[i + 2][i - 1]=0.0;
            }
          }
          for (k=m; k < nn; k++) {
            if (k != m) {
              p=A[k][k - 1];
              q=A[k + 1][k - 1];
              r=0.0;
              if (k + 1 != nn) {
                r=A[k + 2][k - 1];
              }
              if ((x=Math.abs(p) + Math.abs(q) + Math.abs(r)) != 0.0) {
                p/=x;
                q/=x;
                r/=x;
              }
            }
            if ((s=Math.copySign(Math.sqrt(p * p + q * q + r * r),p)) != 0.0) {
              if (k == m) {
                if (l != m) {
                  A[k][k - 1]=-A[k][k - 1];
                }
              }
 else {
                A[k][k - 1]=-s * x;
              }
              p+=s;
              x=p / s;
              y=q / s;
              z=r / s;
              q/=p;
              r/=p;
              for (j=k; j < nn + 1; j++) {
                p=A[k][j] + q * A[k + 1][j];
                if (k + 1 != nn) {
                  p+=r * A[k + 2][j];
                  A[k + 2][j]-=p * z;
                }
                A[k + 1][j]-=p * y;
                A[k][j]-=p * x;
              }
              mmin=nn < k + 3 ? nn : k + 3;
              for (i=l; i < mmin + 1; i++) {
                p=x * A[i][k] + y * A[i][k + 1];
                if (k + 1 != nn) {
                  p+=z * A[i][k + 2];
                  A[i][k + 2]-=p * r;
                }
                A[i][k + 1]-=p * q;
                A[i][k]-=p;
              }
            }
          }
        }
      }
    }
 while (l + 1 < nn);
  }
}
