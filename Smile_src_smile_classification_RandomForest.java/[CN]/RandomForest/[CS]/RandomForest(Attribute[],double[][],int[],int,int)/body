{
  if (x.length != y.length) {
    throw new IllegalArgumentException(String.format("The sizes of X and Y don't match: %d != %d",x.length,y.length));
  }
  if (T < 1) {
    throw new IllegalArgumentException("Invlaid number of trees: " + T);
  }
  if (M < 1) {
    throw new IllegalArgumentException("Invalid number of variables for splitting: " + M);
  }
  int[] labels=Math.unique(y);
  Arrays.sort(labels);
  for (int i=0; i < labels.length; i++) {
    if (labels[i] < 0) {
      throw new IllegalArgumentException("Negative class label: " + labels[i]);
    }
    if (i > 0 && labels[i] - labels[i - 1] > 1) {
      throw new IllegalArgumentException("Missing class: " + labels[i] + 1);
    }
  }
  k=labels.length;
  if (k < 2) {
    throw new IllegalArgumentException("Only one class.");
  }
  if (attributes == null) {
    int p=x[0].length;
    attributes=new Attribute[p];
    for (int i=0; i < p; i++) {
      attributes[i]=new NumericAttribute("V" + (i + 1));
    }
  }
  int n=x.length;
  int[][] prediction=new int[n][k];
  int[][] order=SmileUtils.sort(attributes,x);
  List<TrainingTask> tasks=new ArrayList<TrainingTask>();
  for (int i=0; i < T; i++) {
    tasks.add(new TrainingTask(attributes,x,y,M,order,prediction));
  }
  try {
    trees=MulticoreExecutor.run(tasks);
  }
 catch (  Exception ex) {
    System.err.println(ex);
    trees=new ArrayList<DecisionTree>(T);
    for (int i=0; i < T; i++) {
      trees.add(tasks.get(i).call());
    }
  }
  int m=0;
  for (int i=0; i < n; i++) {
    int pred=Math.whichMax(prediction[i]);
    if (prediction[i][pred] > 0) {
      m++;
      if (pred != y[i]) {
        error++;
      }
    }
  }
  if (m > 0) {
    error/=m;
  }
  importance=new double[attributes.length];
  for (  DecisionTree tree : trees) {
    double[] imp=tree.importance();
    for (int i=0; i < imp.length; i++) {
      importance[i]+=imp[i];
    }
  }
}
