{
  gaussian=new GaussianDistribution(0,sigma);
  int n=0;
  for (int i=0; i < samples.length; i++) {
    if (samples[i].neighbors.size() > 1) {
      n++;
    }
  }
  neighborHashValueModels=new NeighborHashValueModel[n];
  int l=0;
  for (  TrainSample sample : samples) {
    if (sample.neighbors.size() > 1) {
      double[] H=new double[k];
      double[] mu=new double[k];
      double[] var=new double[k];
      for (int i=0; i < k; i++) {
        H[i]=hash.hash(sample.query,i);
        double sum=0.0;
        double sumsq=0.0;
        for (        double[] v : sample.neighbors) {
          double h=hash.hash(v,i);
          sum+=h;
          sumsq+=h * h;
        }
        mu[i]=sum / sample.neighbors.size();
        var[i]=sumsq / sample.neighbors.size() - mu[i] * mu[i];
      }
      neighborHashValueModels[l++]=new NeighborHashValueModel(H,mu,var);
    }
  }
}
