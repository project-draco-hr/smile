{
  SingularValueDecomposition svd=SingularValueDecomposition.decompose(data);
  int d=data[0].length;
  for (int i=0; i < raw.length; i++) {
    int missing=0;
    for (int j=0; j < d; j++) {
      if (Double.isNaN(raw[i][j])) {
        missing++;
      }
 else {
        data[i][j]=raw[i][j];
      }
    }
    if (missing == 0) {
      continue;
    }
    double[][] A=new double[d - missing][k];
    double[] B=new double[d - missing];
    for (int j=0, m=0; j < d; j++) {
      if (!Double.isNaN(raw[i][j])) {
        System.arraycopy(svd.getV()[j],0,A[m],0,k);
        B[m++]=raw[i][j];
      }
    }
    double[] s=Math.solve(A,B);
    for (int j=0; j < d; j++) {
      if (Double.isNaN(raw[i][j])) {
        data[i][j]=0;
        for (int l=0; l < k; l++) {
          data[i][j]+=s[l] * svd.getV()[j][l];
        }
      }
    }
  }
}
