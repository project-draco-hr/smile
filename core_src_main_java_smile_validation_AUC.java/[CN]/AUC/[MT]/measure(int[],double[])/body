{
  if (truth.length != probability.length) {
    throw new IllegalArgumentException(String.format("The vector sizes don't match: %d != %d.",truth.length,probability.length));
  }
  int pos=0;
  int neg=0;
  for (int i=0; i < truth.length; i++) {
    if (truth[i] == 0) {
      neg++;
    }
 else     if (truth[i] == 1) {
      pos++;
    }
 else {
      throw new IllegalArgumentException("AUC is only for binary classification. Invalid label: " + truth[i]);
    }
  }
  int[] label=truth.clone();
  double[] predicition=probability.clone();
  QuickSort.sort(predicition,label);
  double[] rank=new double[label.length];
  for (int i=0; i < predicition.length; i++) {
    if (i == predicition.length - 1 || predicition[i] != predicition[i + 1]) {
      rank[i]=i + 1;
    }
 else {
      int j=i + 1;
      for (; j < predicition.length && predicition[j] == predicition[i]; j++)       ;
      double r=(i + 1 + j) / 2.0;
      for (int k=i; k < j && k < predicition.length; k++)       rank[k]=r;
      i=j - 1;
    }
  }
  double auc=0.0;
  for (int i=0; i < label.length; i++) {
    if (label[i] == 1)     auc+=rank[i];
  }
  auc=(auc - (pos * (pos + 1) / 2)) / (pos * neg);
  return auc;
}
