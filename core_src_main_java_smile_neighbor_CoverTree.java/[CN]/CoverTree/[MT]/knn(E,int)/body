{
  if (k <= 0) {
    throw new IllegalArgumentException("Invalid k: " + k);
  }
  if (k > data.length) {
    throw new IllegalArgumentException("Neighbor array length is larger than the dataset size");
  }
  E e=root.getObject();
  double d=distance.d(e,q);
  Neighbor<E,E> n1=new Neighbor<>(e,e,root.idx,d);
  @SuppressWarnings("unchecked") Neighbor<E,E>[] a1=(Neighbor<E,E>[])java.lang.reflect.Array.newInstance(n1.getClass(),1);
  if (root.children == null) {
    return a1;
  }
  ArrayList<DistanceNode> currentCoverSet=new ArrayList<>();
  ArrayList<DistanceNode> zeroSet=new ArrayList<>();
  currentCoverSet.add(new DistanceNode(d,root));
  DoubleHeapSelect heap=new DoubleHeapSelect(k);
  heap.add(Double.MAX_VALUE);
  boolean emptyHeap=true;
  if (!identicalExcluded || root.getObject() != q) {
    heap.add(d);
    emptyHeap=false;
  }
  while (!currentCoverSet.isEmpty()) {
    ArrayList<DistanceNode> nextCoverSet=new ArrayList<>();
    for (int i=0; i < currentCoverSet.size(); i++) {
      DistanceNode par=currentCoverSet.get(i);
      Node parent=currentCoverSet.get(i).node;
      for (int c=0; c < parent.children.size(); c++) {
        Node child=parent.children.get(c);
        if (c == 0) {
          d=par.dist;
        }
 else {
          d=distance.d(child.getObject(),q);
        }
        double upperBound=emptyHeap ? Double.POSITIVE_INFINITY : heap.peek();
        if (d <= (upperBound + child.maxDist)) {
          if (c > 0 && d < upperBound) {
            if (!identicalExcluded || child.getObject() != q) {
              heap.add(d);
            }
          }
          if (child.children != null) {
            nextCoverSet.add(new DistanceNode(d,child));
          }
 else           if (d <= upperBound) {
            zeroSet.add(new DistanceNode(d,child));
          }
        }
      }
    }
    currentCoverSet=nextCoverSet;
  }
  ArrayList<Neighbor<E,E>> list=new ArrayList<>();
  double upperBound=heap.peek();
  for (int i=0; i < zeroSet.size(); i++) {
    DistanceNode ds=zeroSet.get(i);
    if (ds.dist <= upperBound) {
      if (!identicalExcluded || ds.node.getObject() != q) {
        e=ds.node.getObject();
        list.add(new Neighbor<>(e,e,ds.node.idx,ds.dist));
      }
    }
  }
  Neighbor<E,E>[] neighbors=list.toArray(a1);
  Arrays.sort(neighbors);
  Math.reverse(neighbors);
  return neighbors;
}
