{
  int n=x.length;
  int[] samples=new int[n];
  if (subsample == 1.0) {
    for (int i=0; i < n; i++) {
      int xi=Math.randomInt(n);
      samples[xi]++;
    }
  }
 else {
    int[] perm=new int[n];
    for (int i=0; i < n; i++) {
      perm[i]=i;
    }
    Math.permutate(perm);
    int m=(int)Math.round(n * subsample);
    for (int i=0; i < m; i++) {
      samples[perm[i]]++;
    }
  }
  RegressionTree tree=new RegressionTree(attributes,x,y,maxNodes,nodeSize,mtry,order,samples,null);
  for (int i=0; i < n; i++) {
    if (samples[i] == 0) {
      double pred=tree.predict(x[i]);
synchronized (x[i]) {
        prediction[i]+=pred;
        oob[i]++;
      }
    }
  }
  return tree;
}
