{
  int n=x[0].length;
  double alpha=0.0;
  double[] mean=new double[n];
  double[][] cov=new double[n][n];
  for (int k=0; k < x.length; k++) {
    alpha+=posteriori[k];
    for (int i=0; i < n; i++) {
      mean[i]+=x[k][i] * posteriori[k];
    }
  }
  for (int i=0; i < mean.length; i++) {
    mean[i]/=alpha;
  }
  if (diagonal) {
    for (int k=0; k < x.length; k++) {
      for (int i=0; i < n; i++) {
        cov[i][i]+=(x[k][i] - mean[i]) * (x[k][i] - mean[i]) * posteriori[k];
      }
    }
    for (int i=0; i < cov.length; i++) {
      cov[i][i]/=alpha;
    }
  }
 else {
    for (int k=0; k < x.length; k++) {
      for (int i=0; i < n; i++) {
        for (int j=0; j < n; j++) {
          cov[i][j]+=(x[k][i] - mean[i]) * (x[k][j] - mean[j]) * posteriori[k];
        }
      }
    }
    for (int i=0; i < cov.length; i++) {
      for (int j=0; j < cov[i].length; j++) {
        cov[i][j]/=alpha;
      }
      cov[i][i]*=1.00001;
    }
  }
  MultivariateMixture.Component c=new MultivariateMixture.Component();
  c.priori=alpha;
  MultivariateGaussianDistribution g=new MultivariateGaussianDistribution(mean,cov);
  g.diagonal=diagonal;
  c.distribution=g;
  return c;
}
