{
  System.out.println("CPU");
  ArffParser parser=new ArffParser();
  parser.setResponseIndex(6);
  try {
    AttributeDataset data=parser.parse(smile.data.parser.IOUtils.getTestDataFile("weka/cpu.arff"));
    double[] datay=data.toArray(new double[data.size()]);
    double[][] datax=data.toArray(new double[data.size()][]);
    int n=datax.length;
    int m=3 * n / 4;
    int[] index=Math.permutate(n);
    double[][] trainx=new double[m][];
    double[] trainy=new double[m];
    for (int i=0; i < m; i++) {
      trainx[i]=datax[index[i]];
      trainy[i]=datay[index[i]];
    }
    double[][] testx=new double[n - m][];
    double[] testy=new double[n - m];
    for (int i=m; i < n; i++) {
      testx[i - m]=datax[index[i]];
      testy[i - m]=datay[index[i]];
    }
    RandomForest forest=new RandomForest(data.attributes(),trainx,trainy,100,trainx[0].length / 3,5,n);
    System.out.format("RMSE = %.4f\n",Validation.test(forest,testx,testy));
    double[] rmse=forest.test(testx,testy);
    for (int i=1; i <= rmse.length; i++) {
      System.out.format("%d trees RMSE = %.4f\n",i,rmse[i - 1]);
    }
    double[] importance=forest.importance();
    index=QuickSort.sort(importance);
    for (int i=importance.length; i-- > 0; ) {
      System.out.format("%s importance is %.4f\n",data.attributes()[index[i]],importance[i]);
    }
  }
 catch (  Exception ex) {
    System.err.println(ex);
  }
}
