{
  super(new JFormattedTextField());
  textField=(JFormattedTextField)getComponent();
  DefaultFormatter formatter=new DefaultFormatter(){
    @Override public Object stringToValue(    String string) throws ParseException {
      string=string.trim();
      if (string.isEmpty()) {
        throw new ParseException("Empty string",0);
      }
      int begin=0;
      char ch=string.charAt(0);
      if (ch == '[' || ch == '{' || ch == '<') {
        begin=1;
      }
      int end=string.length();
      ch=string.charAt(end - 1);
      if (ch == ']' || ch == '}' || ch == '>') {
        end-=1;
      }
      string=string.substring(begin,end);
      String[] items=string.split("\\s*[ ,;:]\\s*");
      int[] data=new int[items.length];
      for (int i=0; i < data.length; i++) {
        data[i]=Integer.valueOf(items[i].trim());
      }
      return data;
    }
    @Override public String valueToString(    Object value) throws ParseException {
      if (value == null) {
        return "";
      }
      StringBuilder builder=new StringBuilder();
      if (value instanceof byte[]) {
        byte[] data=(byte[])value;
        if (data.length > 0) {
          builder.append("[").append(data[0]);
        }
        for (int i=1; i < data.length; i++) {
          builder.append(", ").append(data[i]);
        }
        builder.append("]");
      }
 else       if (value instanceof short[]) {
        short[] data=(short[])value;
        if (data.length > 0) {
          builder.append("[").append(data[0]);
        }
        for (int i=1; i < data.length; i++) {
          builder.append(", ").append(data[i]);
        }
        builder.append("]");
      }
 else       if (value instanceof int[]) {
        int[] data=(int[])value;
        if (data.length > 0) {
          builder.append("[").append(data[0]);
        }
        for (int i=1; i < data.length; i++) {
          builder.append(", ").append(data[i]);
        }
        builder.append("]");
      }
 else       if (value instanceof long[]) {
        long[] data=(long[])value;
        if (data.length > 0) {
          builder.append("[").append(data[0]);
        }
        for (int i=1; i < data.length; i++) {
          builder.append(", ").append(data[i]);
        }
        builder.append("]");
      }
 else {
        throw new ParseException("Unsupport data type: " + value.getClass(),0);
      }
      return builder.toString();
    }
  }
;
  formatter.setOverwriteMode(false);
  textField.setFormatterFactory(new DefaultFormatterFactory(formatter));
  textField.setHorizontalAlignment(JTextField.TRAILING);
  textField.setFocusLostBehavior(JFormattedTextField.PERSIST);
  textField.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),"check");
  textField.getActionMap().put("check",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      if (!textField.isEditValid()) {
        Toolkit.getDefaultToolkit().beep();
        textField.selectAll();
      }
 else {
        try {
          textField.commitEdit();
          textField.postActionEvent();
        }
 catch (        java.text.ParseException ex) {
        }
      }
    }
  }
);
}
