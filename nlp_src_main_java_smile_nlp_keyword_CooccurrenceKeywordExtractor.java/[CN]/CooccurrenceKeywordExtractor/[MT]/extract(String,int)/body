{
  ArrayList<String[]> sentences=new ArrayList<String[]>();
  SimpleTokenizer tokenizer=new SimpleTokenizer();
  PorterStemmer stemmer=new PorterStemmer();
  int ntotal=0;
  for (  String paragraph : SimpleParagraphSplitter.getInstance().split(text)) {
    for (    String s : SimpleSentenceSplitter.getInstance().split(paragraph)) {
      String[] sentence=tokenizer.split(s);
      for (int i=0; i < sentence.length; i++) {
        sentence[i]=stemmer.stripPluralParticiple(sentence[i]).toLowerCase();
      }
      sentences.add(sentence);
      ntotal+=sentence.length;
    }
  }
  int maxNGramSize=4;
  ArrayList<NGram> terms=new ArrayList<NGram>();
  AprioriPhraseExtractor phraseExtractor=new AprioriPhraseExtractor();
  for (  ArrayList<NGram> ngrams : phraseExtractor.extract(sentences,maxNGramSize,4)) {
    for (    NGram ngram : ngrams) {
      terms.add(ngram);
    }
  }
  Collections.sort(terms);
  int n=3 * terms.size() / 10;
  NGram[] freqTerms=new NGram[n];
  for (int i=0, start=terms.size() - n; i < n; i++) {
    freqTerms[i]=terms.get(start + i);
  }
  Trie<String,Integer> trie=new Trie<String,Integer>();
  for (int i=0; i < n; i++) {
    trie.put(freqTerms[i].words,i);
  }
  int[] nw=new int[n];
  int[][] table=new int[n][n];
  for (  String[] sentence : sentences) {
    Set<Integer> phrases=new HashSet<Integer>();
    for (int j=1; j <= maxNGramSize; j++) {
      for (int i=0; i <= sentence.length - j; i++) {
        String[] phrase=Arrays.copyOfRange(sentence,i,i + j);
        Integer index=trie.get(phrase);
        if (index != null) {
          phrases.add(index);
        }
      }
    }
    for (    int i : phrases) {
      nw[i]+=phrases.size();
      for (      int j : phrases) {
        if (i != j) {
          table[i][j]++;
        }
      }
    }
  }
  int[] cluster=new int[n];
  for (int i=0; i < cluster.length; i++) {
    cluster[i]=i;
  }
  for (int i=0; i < n; i++) {
    for (int j=i + 1; j < n; j++) {
      if (table[i][j] > 0) {
        double mutual=(double)table[i][j] * table[i][j] / (freqTerms[i].freq * freqTerms[j].freq);
        if (mutual >= 0.25) {
          cluster[j]=cluster[i];
        }
      }
    }
  }
  double[] pc=new double[n];
  for (int i=0; i < n; i++) {
    for (int j=0; j < n; j++) {
      pc[cluster[j]]+=table[i][j];
    }
  }
  for (int i=0; i < n; i++) {
    pc[i]/=ntotal;
  }
  double[] score=new double[n];
  for (int i=0; i < n; i++) {
    double max=Double.NEGATIVE_INFINITY;
    for (int j=0; j < n; j++) {
      if (cluster[j] != j) {
        continue;
      }
      double fwc=0.0;
      for (int k=0; k < n; k++) {
        if (cluster[k] == j)         fwc+=table[i][k];
      }
      double expected=nw[i] * pc[j];
      double d=(fwc - expected);
      double chisq=d * d / expected;
      score[i]+=chisq;
      if (chisq > max)       max=chisq;
    }
  }
  int[] index=QuickSort.sort(score);
  ArrayList<NGram> keywords=new ArrayList<NGram>();
  for (int i=n; i-- > 0; ) {
    boolean add=true;
    for (int j=i + 1; j < n; j++) {
      if (cluster[index[j]] == cluster[index[i]]) {
        if (freqTerms[index[j]].words.length >= freqTerms[index[i]].words.length) {
          add=false;
          break;
        }
 else {
          keywords.remove(freqTerms[index[j]]);
          add=true;
        }
      }
    }
    if (add) {
      keywords.add(freqTerms[index[i]]);
      if (keywords.size() >= maxNumKeywords)       break;
    }
  }
  return keywords;
}
