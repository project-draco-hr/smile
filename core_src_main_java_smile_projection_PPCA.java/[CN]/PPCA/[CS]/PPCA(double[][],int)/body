{
  int m=data.length;
  int n=data[0].length;
  mu=Math.colMean(data);
  double[][] cov=new double[n][n];
  for (int l=0; l < m; l++) {
    for (int i=0; i < n; i++) {
      for (int j=0; j <= i; j++) {
        cov[i][j]+=(data[l][i] - mu[i]) * (data[l][j] - mu[j]);
      }
    }
  }
  for (int i=0; i < n; i++) {
    for (int j=0; j <= i; j++) {
      cov[i][j]/=m;
      cov[j][i]=cov[i][j];
    }
  }
  EigenValueDecomposition eigen=EigenValueDecomposition.decompose(cov,true);
  double[] evalues=eigen.getEigenValues();
  double[][] evectors=eigen.getEigenVectors();
  noise=0.0;
  for (int i=k; i < n; i++) {
    noise+=evalues[i];
  }
  noise/=(n - k);
  loading=new double[n][k];
  for (int i=0; i < n; i++) {
    for (int j=0; j < k; j++) {
      loading[i][j]=evectors[i][j] * Math.sqrt(evalues[j] - noise);
    }
  }
  double[][] M=Math.atamm(loading);
  for (int i=0; i < k; i++) {
    M[i][i]+=noise;
  }
  LUDecomposition lu=new LUDecomposition(M);
  double[][] Mi=lu.inverse();
  projection=Math.abtmm(Mi,loading);
  pmu=new double[projection.length];
  Math.ax(projection,mu,pmu);
}
