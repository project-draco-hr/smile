{
  int m=proximity.length;
  int n=proximity[0].length;
  if (m != n) {
    throw new IllegalArgumentException("The proximity matrix is not square.");
  }
  if (k < 1 || k >= n) {
    throw new IllegalArgumentException("Invalid k = " + k);
  }
  double[][] A=new double[n][n];
  double[][] B=new double[n][n];
  for (int i=0; i < n; i++) {
    for (int j=0; j < i; j++) {
      A[i][j]=-0.5 * Math.sqr(proximity[i][j]);
      A[j][i]=A[i][j];
    }
  }
  double[] mean=Math.rowMean(A);
  double mu=Math.mean(mean);
  for (int i=0; i < n; i++) {
    for (int j=0; j <= i; j++) {
      B[i][j]=A[i][j] - mean[i] - mean[j] + mu;
      B[j][i]=B[i][j];
    }
  }
  if (add) {
    double[][] Z=new double[2 * n][2 * n];
    for (int i=0; i < n; i++) {
      for (int j=0; j < n; j++) {
        Z[i][n + j]=2 * B[i][j];
      }
    }
    for (int i=0; i < n; i++) {
      Z[n + i][i]=-1;
    }
    mean=Math.rowMean(proximity);
    mu=Math.mean(mean);
    for (int i=0; i < n; i++) {
      for (int j=0; j < n; j++) {
        Z[n + i][n + j]=2 * (proximity[i][j] - mean[i] - mean[j] + mu);
      }
    }
    EigenValueDecomposition eigen=Math.eigen(Z,false,true);
    double c=Math.max(eigen.getEigenValues());
    for (int i=0; i < n; i++) {
      B[i][i]=0.0;
      for (int j=0; j < i; j++) {
        B[i][j]=-0.5 * Math.sqr(proximity[i][j] + c);
        B[j][i]=B[i][j];
      }
    }
  }
  EigenValueDecomposition eigen=Math.eigen(B,k);
  coordinates=new double[n][k];
  for (int j=0; j < k; j++) {
    if (eigen.getEigenValues()[j] < 0) {
      throw new IllegalArgumentException(String.format("Some of the first %d eigenvalues are < 0.",k));
    }
    double scale=Math.sqrt(eigen.getEigenValues()[j]);
    for (int i=0; i < n; i++) {
      coordinates[i][j]=eigen.getEigenVectors()[i][j] * scale;
    }
  }
  eigenvalues=eigen.getEigenValues();
  proportion=eigenvalues.clone();
  Math.unitize1(proportion);
}
