{
  try {
    numLocal=Integer.parseInt(numLocalField.getText().trim());
    if (numLocal < 5) {
      JOptionPane.showMessageDialog(this,"Toll smal NumLocal: " + numLocal,ERROR,JOptionPane.ERROR_MESSAGE);
      return null;
    }
  }
 catch (  Exception e) {
    JOptionPane.showMessageDialog(this,"Invalid NumLocal: " + numLocalField.getText(),ERROR,JOptionPane.ERROR_MESSAGE);
    return null;
  }
  try {
    maxNeighbor=Integer.parseInt(maxNeighborField.getText().trim());
    if (maxNeighbor < 5) {
      JOptionPane.showMessageDialog(this,"Too small MaxNeighbor: " + maxNeighbor,ERROR,JOptionPane.ERROR_MESSAGE);
      return null;
    }
  }
 catch (  Exception e) {
    JOptionPane.showMessageDialog(this,"Invalid MaxNeighbor: " + maxNeighborField.getText(),ERROR,JOptionPane.ERROR_MESSAGE);
    return null;
  }
  long clock=System.currentTimeMillis();
  CLARANS<double[]> clarans=new CLARANS<double[]>(dataset[datasetIndex],new EuclideanDistance(),clusterNumber,maxNeighbor,numLocal);
  System.out.format("CLARANS clusterings %d samples in %dms\n",dataset[datasetIndex].length,System.currentTimeMillis() - clock);
  PlotCanvas plot=ScatterPlot.plot(clarans.medoids(),'@');
  for (int k=0; k < clusterNumber; k++) {
    if (clarans.getClusterSize()[k] > 0) {
      double[][] cluster=new double[clarans.getClusterSize()[k]][];
      for (int i=0, j=0; i < dataset[datasetIndex].length; i++) {
        if (clarans.getClusterLabel()[i] == k) {
          cluster[j++]=dataset[datasetIndex][i];
        }
      }
      plot.points(cluster,pointLegend,Palette.COLORS[k % Palette.COLORS.length]);
    }
  }
  plot.points(clarans.medoids(),'@');
  return plot;
}
