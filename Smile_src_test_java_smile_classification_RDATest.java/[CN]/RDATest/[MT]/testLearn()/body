{
  System.out.println("learn");
  ArffParser arffParser=new ArffParser();
  arffParser.setResponseIndex(4);
  try {
    AttributeDataset iris=arffParser.parse(this.getClass().getResourceAsStream("/smile/data/weka/iris.arff"));
    double[][] x=iris.toArray(new double[iris.size()][]);
    int[] y=iris.toArray(new int[iris.size()]);
    int n=x.length;
    LOOCV loocv=new LOOCV(n);
    int error=0;
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      RDA rda=new RDA(trainx,trainy,0.0);
      if (y[loocv.test[i]] != rda.predict(x[loocv.test[i]]))       error++;
    }
    System.out.println("RDA (0.0) error = " + error);
    assertEquals(22,error);
    error=0;
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      RDA rda=new RDA(trainx,trainy,0.1);
      if (y[loocv.test[i]] != rda.predict(x[loocv.test[i]]))       error++;
    }
    System.out.println("RDA (0.1) error = " + error);
    assertEquals(24,error);
    error=0;
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      RDA rda=new RDA(trainx,trainy,0.2);
      if (y[loocv.test[i]] != rda.predict(x[loocv.test[i]]))       error++;
    }
    System.out.println("RDA (0.2) error = " + error);
    assertEquals(20,error);
    error=0;
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      RDA rda=new RDA(trainx,trainy,0.3);
      if (y[loocv.test[i]] != rda.predict(x[loocv.test[i]]))       error++;
    }
    System.out.println("RDA (0.3) error = " + error);
    assertEquals(19,error);
    error=0;
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      RDA rda=new RDA(trainx,trainy,0.4);
      if (y[loocv.test[i]] != rda.predict(x[loocv.test[i]]))       error++;
    }
    System.out.println("RDA (0.4) error = " + error);
    assertEquals(16,error);
    error=0;
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      RDA rda=new RDA(trainx,trainy,0.5);
      if (y[loocv.test[i]] != rda.predict(x[loocv.test[i]]))       error++;
    }
    System.out.println("RDA (0.5) error = " + error);
    assertEquals(12,error);
    error=0;
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      RDA rda=new RDA(trainx,trainy,0.6);
      if (y[loocv.test[i]] != rda.predict(x[loocv.test[i]]))       error++;
    }
    System.out.println("RDA (0.6) error = " + error);
    assertEquals(11,error);
    error=0;
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      RDA rda=new RDA(trainx,trainy,0.7);
      if (y[loocv.test[i]] != rda.predict(x[loocv.test[i]]))       error++;
    }
    System.out.println("RDA (0.7) error = " + error);
    assertEquals(9,error);
    error=0;
    double[] posteriori=new double[3];
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      RDA rda=new RDA(trainx,trainy,0.8);
      if (y[loocv.test[i]] != rda.predict(x[loocv.test[i]],posteriori))       error++;
    }
    System.out.println("RDA (0.8) error = " + error);
    assertEquals(6,error);
    error=0;
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      RDA rda=new RDA(trainx,trainy,0.9);
      if (y[loocv.test[i]] != rda.predict(x[loocv.test[i]]))       error++;
    }
    System.out.println("RDA (0.9) error = " + error);
    assertEquals(3,error);
    error=0;
    for (int i=0; i < n; i++) {
      double[][] trainx=Math.slice(x,loocv.train[i]);
      int[] trainy=Math.slice(y,loocv.train[i]);
      RDA rda=new RDA(trainx,trainy,1.0);
      if (y[loocv.test[i]] != rda.predict(x[loocv.test[i]]))       error++;
    }
    System.out.println("RDA (1.0) error = " + error);
    assertEquals(4,error);
  }
 catch (  Exception ex) {
    System.err.println(ex);
  }
}
