{
  int d=centroids[0].length;
  double minDist=Math.squaredDistance(node.center,centroids[candidates[0]]);
  int closest=candidates[0];
  for (int i=1; i < k; i++) {
    double dist=Math.squaredDistance(node.center,centroids[candidates[i]]);
    if (dist < minDist) {
      minDist=dist;
      closest=candidates[i];
    }
  }
  if (node.lower != null) {
    int[] newCandidates=new int[k];
    int newk=0;
    for (int i=0; i < k; i++) {
      if (!prune(node.center,node.radius,centroids,closest,candidates[i])) {
        newCandidates[newk++]=candidates[i];
      }
    }
    if (newk > 1) {
      double result=filter(node.lower,centroids,newCandidates,newk,sums,counts,membership) + filter(node.upper,centroids,newCandidates,newk,sums,counts,membership);
      return result;
    }
  }
  for (int i=0; i < d; i++) {
    sums[closest][i]+=node.sum[i];
  }
  counts[closest]+=node.count;
  if (membership != null) {
    int last=node.index + node.count;
    for (int i=node.index; i < last; i++) {
      membership[index[i]]=closest;
    }
  }
  return getNodeCost(node,centroids[closest]);
}
