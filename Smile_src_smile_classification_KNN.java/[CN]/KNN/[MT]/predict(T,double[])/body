{
  if (posteriori != null && posteriori.length != c) {
    throw new IllegalArgumentException(String.format("Invalid posteriori vector size: %d, expected: %d",posteriori.length,c));
  }
  Neighbor<T,T>[] neighbors=knn.knn(x,k);
  if (k == 1) {
    return y[neighbors[0].index];
  }
  int[] count=new int[c];
  for (int i=0; i < k; i++) {
    count[y[neighbors[i].index]]++;
  }
  if (posteriori != null) {
    for (int i=0; i < c; i++) {
      posteriori[i]=(double)count[i] / k;
    }
  }
  int max=0;
  int idx=0;
  for (int i=0; i < c; i++) {
    if (count[i] > max) {
      max=count[i];
      idx=i;
    }
  }
  return idx;
}
