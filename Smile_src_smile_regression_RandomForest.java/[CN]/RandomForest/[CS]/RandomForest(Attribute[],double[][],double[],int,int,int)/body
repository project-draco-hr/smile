{
  if (x.length != y.length) {
    throw new IllegalArgumentException(String.format("The sizes of X and Y don't match: %d != %d",x.length,y.length));
  }
  if (attributes == null) {
    int p=x[0].length;
    attributes=new Attribute[p];
    for (int i=0; i < p; i++) {
      attributes[i]=new NumericAttribute("V" + (i + 1));
    }
  }
  if (M <= 0) {
    M=Math.max(1,x[0].length / 3);
  }
  if (S <= 0) {
    throw new IllegalArgumentException("Invalid minimum leaf node size: " + S);
  }
  int n=x.length;
  double[] prediction=new double[n];
  int[] oob=new int[n];
  int[][] order=SmileUtils.sort(attributes,x);
  List<TrainingTask> tasks=new ArrayList<TrainingTask>();
  for (int i=0; i < T; i++) {
    tasks.add(new TrainingTask(attributes,x,y,order,M,S,prediction,oob));
  }
  try {
    trees=MulticoreExecutor.run(tasks);
  }
 catch (  Exception ex) {
    System.err.println(ex);
    trees=new ArrayList<RegressionTree>(T);
    for (int i=0; i < T; i++) {
      trees.add(tasks.get(i).call());
    }
  }
  int m=0;
  for (int i=0; i < n; i++) {
    if (oob[i] > 0) {
      m++;
      double pred=prediction[i] / oob[i];
      error+=Math.sqr(pred - y[i]);
    }
  }
  if (m > 0) {
    error=Math.sqrt(error / m);
  }
  importance=new double[attributes.length];
  for (  RegressionTree tree : trees) {
    double[] imp=tree.importance();
    for (int i=0; i < imp.length; i++) {
      importance[i]+=imp[i];
    }
  }
}
