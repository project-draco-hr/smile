{
  int n=trellis.length;
  for (int i=0; i < numClasses; i++) {
    if (numFeatures <= 0) {
      for (int k=trellis[0][i].age; k < potentials[i].trees.size(); k++) {
        trellis[0][i].scores[0]+=potentials[i].eta * potentials[i].trees.get(k).predict(trellis[0][i].samples[0]);
      }
    }
 else {
      for (int k=trellis[0][i].age; k < potentials[i].trees.size(); k++) {
        trellis[0][i].scores[0]+=potentials[i].eta * potentials[i].trees.get(k).predict(trellis[0][i].sparseSamples[0]);
      }
    }
    trellis[0][i].expScores[0]=Math.exp(trellis[0][i].scores[0]);
    trellis[0][i].alpha=trellis[0][i].expScores[0];
    trellis[0][i].age=potentials[i].trees.size();
  }
  scaling[0]=0.0;
  for (int i=0; i < numClasses; i++) {
    scaling[0]+=trellis[0][i].alpha;
  }
  for (int i=0; i < numClasses; i++) {
    trellis[0][i].alpha/=scaling[0];
  }
  for (int t=1; t < n; t++) {
    for (int i=0; i < numClasses; i++) {
      trellis[t][i].alpha=0.0;
      for (int j=0; j < numClasses; j++) {
        if (numFeatures <= 0) {
          for (int k=trellis[t][i].age; k < potentials[i].trees.size(); k++) {
            trellis[t][i].scores[j]+=potentials[i].eta * potentials[i].trees.get(k).predict(trellis[t][i].samples[j]);
          }
        }
 else {
          for (int k=trellis[t][i].age; k < potentials[i].trees.size(); k++) {
            trellis[t][i].scores[j]+=potentials[i].eta * potentials[i].trees.get(k).predict(trellis[t][i].sparseSamples[j]);
          }
        }
        trellis[t][i].expScores[j]=Math.exp(trellis[t][i].scores[j]);
        trellis[t][i].alpha+=trellis[t][i].expScores[j] * trellis[t - 1][j].alpha;
      }
      trellis[t][i].age=potentials[i].trees.size();
    }
    scaling[t]=0.0;
    for (int i=0; i < numClasses; i++) {
      scaling[t]+=trellis[t][i].alpha;
    }
    for (int i=0; i < numClasses; i++) {
      trellis[t][i].alpha/=scaling[t];
    }
  }
}
